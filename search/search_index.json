{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the SystemC Community Portal Your online reference for everything related to SystemC, the language for system-level design, high-level synthesis, modeling and verification. Overview Downloads SystemC Evolution Fika The next SystemC Fika takes place as virtual event at April 7. Main theme of the event: Parallelization of SystemC simulations. Event details Free registration","title":"Home"},{"location":"about/","text":"About systemc.org is maintained by the SystemC Working Groups at Accellera Systems Initiative . About Accellera Systems Initiative Accellera Systems Initiative is an independent, not-for profit organization dedicated to create, support, promote, and advance system-level design, modeling, and verification standards for use by the worldwide electronics industry. We are composed of a broad range of members that fully support the work of our technical committee to develop technology standards that are balanced, open, and benefit the worldwide electronics industry. Leading companies and semiconductor manufacturers around the world are using our electronic design automation (EDA) and intellectual property (IP) standards in a wide range of projects in numerous application areas to develop consumer, mobile, wireless, automotive, and other \u201csmart\u201d electronic devices. Through an ongoing partnership with the IEEE, standards and technical implementations developed by Accellera Systems Initiative are contributed to the IEEE for formal standardization and ongoing governance. About Accellera SystemC Working Groups Accellera's SystemC Working Groups are responsible for the definition and development of the SystemC Core and Transaction Level Modeling (TLM) language, including extensions for analog/mixed-signal (AMS), control, configuration, and inspection (CCI), sythesis and verification. Participants of these working groups include member companies and industry contributors. Technical contributors typically have many years of practical experience with IC and system-level design as well as developing system-level design methodologies and using EDA tools. Accellera, Accellera Systems Initiative and SystemC are trademarks of Accellera Systems Initiative Inc. All other trademarks and trade names are the property of their respective owners.","title":"About"},{"location":"about/#about","text":"systemc.org is maintained by the SystemC Working Groups at Accellera Systems Initiative .","title":"About "},{"location":"about/#about-accellera-systems-initiative","text":"Accellera Systems Initiative is an independent, not-for profit organization dedicated to create, support, promote, and advance system-level design, modeling, and verification standards for use by the worldwide electronics industry. We are composed of a broad range of members that fully support the work of our technical committee to develop technology standards that are balanced, open, and benefit the worldwide electronics industry. Leading companies and semiconductor manufacturers around the world are using our electronic design automation (EDA) and intellectual property (IP) standards in a wide range of projects in numerous application areas to develop consumer, mobile, wireless, automotive, and other \u201csmart\u201d electronic devices. Through an ongoing partnership with the IEEE, standards and technical implementations developed by Accellera Systems Initiative are contributed to the IEEE for formal standardization and ongoing governance.","title":"About Accellera Systems Initiative"},{"location":"about/#about-accellera-systemc-working-groups","text":"Accellera's SystemC Working Groups are responsible for the definition and development of the SystemC Core and Transaction Level Modeling (TLM) language, including extensions for analog/mixed-signal (AMS), control, configuration, and inspection (CCI), sythesis and verification. Participants of these working groups include member companies and industry contributors. Technical contributors typically have many years of practical experience with IC and system-level design as well as developing system-level design methodologies and using EDA tools. Accellera, Accellera Systems Initiative and SystemC are trademarks of Accellera Systems Initiative Inc. All other trademarks and trade names are the property of their respective owners.","title":"About Accellera SystemC Working Groups"},{"location":"privacy/","text":"Website Privacy Policy Accellera Systems Initiative is committed to protecting your online privacy on our websites, including but not limited to our site accessible at accellera.org . The privacy practices described in this privacy policy apply to accellera.org and to all of our websites (collectively, the \"Site\"). This privacy policy does not cover any other data collection or processing, including, without limitation, data collection practices of global sponsors or other websites to which we link or data that we or our affiliates collect offline or through web pages that do not display a direct link to this privacy policy. Some of the reasons why we collect your personal information include: Register to access certain parts of the Site Register to attend events Register to view videos and other promotions Register to subscribe to newsletters and community notifications Participate in discussion forums Register to download standards and draft document We occasionally employ other companies and individuals to perform functions on our behalf. Examples include sending postal mail and e-mail, removing repetitive information from customer lists, analyzing data, providing marketing and technical assistance, and processing membership fees. These third party service providers have access to personal information needed to perform their functions, but may not use it for other purposes. We do not sell, rent, share, or otherwise disclose personally identifiable information from customers for commercial purposes. Collection of Personally Identifiable Information Registration In order to use certain protected areas of the Site, you first must complete a registration form and create a user ID and password. During registration you are required to give contact information (such as name and email address). Registration may also be required to attend events, view videos, respond to surveys, and enter contests. These are separate from the Site registration and do not establish a user account on the Site. You are required to give contact information (such as name and email address), but are not required to create a user ID and password. Collection of Non-Personally Identifiable Information Log Files As is true of most websites, we gather certain information automatically and store it in log files. This information includes internet protocol (IP) addresses, browser type, internet service provider (ISP), referring/exit pages, operating system, date/time stamp, file downloads, and license acceptance. We use this information to analyze trends, to administer the Site, to track users' movements around the Site, to enhance your experience in using our Site, and to gather demographic information about our user base as a whole. This information is used to better understand and improve the usability, performance, and effectiveness of the Site. Cookies Some web pages use \"cookies,\" which are small files saved on your computer. Cookies help us recognize your user preferences and can improve your future web visits. You can set your web browser to notify you when you are receiving a cookie and choose to reject it. However, rejecting cookies may affect the performance of the Site and prevent you from accessing certain Accellera Systems Initiative information. Communications Working Group and Event-related Announcements We may occasionally send you information on important Accellera Systems Initiative technical advancements and events that might be of interest to you. Out of respect for your privacy, we present the option not to receive these types of communications. Please see Choice and Opt-Out below. Newsletters We will occasionally use your name and email address to send newsletters to you. Out of respect for your privacy, we provide you a way to unsubscribe. Please see Choice and Opt-Out below. Information Sharing and Disclosure Personally Identifiable Information In addition to any sharing of personally identifiable information otherwise detailed in this policy, we may occasionally share personally identifiable information with third parties acting as either agents or service providers acting on our behalf. Site Registration When you register to use the Site, we may use this information to contact you about the services on our Site in which you have expressed interest. We do not share this information other than as necessary to enable subcontractors to provide you with the services of the Site or otherwise as you have requested. Event Registration If you register for an event (whether sponsored by, organized by, or otherwise related to Accellera Systems Initiative, including third-party events for which Accellera Systems Initiative provides a registration mechanism) on or in connection with the Site, the information you provide may be shared with the sponsors of the event and other Accellera Systems Initiative sponsors, and the use of your personal information will be subject to the relative applicable privacy policies. Video Viewing Registration Registration may be required to view videos posted on the Site. As with events, the information you provide in connection with such registration may be shared with the sponsors of the video and/or other Accellera Systems Initiative sponsors, and their use of your personal information will be subject to the relative applicable privacy policies. Surveys or Contests From time to time we may provide you the opportunity to participate in contests or surveys on the Site or at a meeting. If you participate, we may request certain personally identifiable information from you. Participation in these surveys or contests is completely voluntary and you therefore have a choice whether or not to disclose this information. The requested information typically includes contact information (such as name and shipping address), and demographic information (such as zip code). We use this information to notify contest winners and award prizes, and sometimes to send participants an email newsletter if requested. In some cases, we may use a third-party service provider to conduct these surveys or contests; any such provider is subject to the limitations of this policy. Agents & Service Providers We use third parties to process membership fees and provide certain specific services on the Site, such as registration for certain events. When you sign up for these particular services, we may share your personal information as necessary with authorized third-party agents or contractors in order to provide the requested service or transaction. We only provide third-party agents and service providers with the minimum amount of personal information necessary to complete the requested service or transaction. We do not permit these companies to share or use personally identifiable information for any other purposes. Legal Disclaimer We reserve the right to disclose your personally identifiable information as required by law and when we believe that disclosure is necessary to protect our rights and/or to comply with a judicial proceeding, court order, or legal process served on the Site. Also, we reserve the right to fully use and disclose any information collected via the Site that is not in a personally identifiable form. Links to Other Sites This Site contains links to other websites that are not owned or controlled by Accellera Systems Initiative. Please be aware Accellera Systems Initiative is not responsible for the privacy practices of such other websites. When you leave our Site, we encourage you to be aware and to read the privacy statements of each and every website that collects personally identifiable information. This privacy statement applies only to information collected by Accellera Systems Initiative websites. Discussion Forums If you use a Discussion Forum on the Site, you should be aware that any personally identifiable information you post in a publicly viewable area there can be read, collected, or used by other users of these forums, and could be used to send you unsolicited messages. We are not responsible for the personally identifiable information you choose to submit in these forums. International Transfer Your information may be transferred to -- and maintained on -- computers located outside of your state, province, country, or other governmental jurisdiction where the privacy laws may not be as protective as those in your jurisdiction. Access to Personally Identifiable Information We need your help in keeping the personally identifiable information you share with us accurate and up to date. When changes to your personal information occur, please update your account information using the mechanism provided on the Site. Please notify us of any other changes to your personal information (for example, if you change member company status). Choice and Opt-Out If you do not wish to receive any communications from us, you can opt out through the mechanism on the Site. You can also request that your account be deleted in its entirety. If you no longer wish to receive a particular newsletter or promotional communication, you may opt out of receiving it by following the instructions included in each respective newsletter or communication. Please note that other data recipients have their own data privacy policies, which may differ from ours and you would have to contact them separately with respect to opt-out requests. Security Transmissions over the Internet are never 100% secure or error-free. However, security of your personal information is important to us. We follow generally accepted industry standards to protect the personal information submitted to us, both during transmission and once we receive it. It is your responsibility to safeguard any password and User ID you use to access the Site and to notify us at privacy@lists.accellera.org if you ever suspect that this password or User ID has been compromised. You are solely responsible for any unauthorized use of the Site conducted via your password and User ID. You can change your password and User ID through the mechanism on the Site. Changes in this Privacy Policy We reserve the right to modify this privacy statement at any time, so please review it frequently. If we make material changes to this policy, we will post the revised policy here. When you visit the Site, you are accepting the current version of this privacy policy as posted on the Site at that time. Contact Us If you have any questions or suggestions regarding our privacy policy, please contact us at privacy@lists.accellera.org .","title":"Website Privacy Policy"},{"location":"privacy/#website-privacy-policy","text":"Accellera Systems Initiative is committed to protecting your online privacy on our websites, including but not limited to our site accessible at accellera.org . The privacy practices described in this privacy policy apply to accellera.org and to all of our websites (collectively, the \"Site\"). This privacy policy does not cover any other data collection or processing, including, without limitation, data collection practices of global sponsors or other websites to which we link or data that we or our affiliates collect offline or through web pages that do not display a direct link to this privacy policy. Some of the reasons why we collect your personal information include: Register to access certain parts of the Site Register to attend events Register to view videos and other promotions Register to subscribe to newsletters and community notifications Participate in discussion forums Register to download standards and draft document We occasionally employ other companies and individuals to perform functions on our behalf. Examples include sending postal mail and e-mail, removing repetitive information from customer lists, analyzing data, providing marketing and technical assistance, and processing membership fees. These third party service providers have access to personal information needed to perform their functions, but may not use it for other purposes. We do not sell, rent, share, or otherwise disclose personally identifiable information from customers for commercial purposes.","title":"Website Privacy Policy"},{"location":"privacy/#collection-of-personally-identifiable-information","text":"","title":"Collection of Personally Identifiable Information"},{"location":"privacy/#registration","text":"In order to use certain protected areas of the Site, you first must complete a registration form and create a user ID and password. During registration you are required to give contact information (such as name and email address). Registration may also be required to attend events, view videos, respond to surveys, and enter contests. These are separate from the Site registration and do not establish a user account on the Site. You are required to give contact information (such as name and email address), but are not required to create a user ID and password.","title":"Registration"},{"location":"privacy/#collection-of-non-personally-identifiable-information","text":"","title":"Collection of Non-Personally Identifiable Information"},{"location":"privacy/#log-files","text":"As is true of most websites, we gather certain information automatically and store it in log files. This information includes internet protocol (IP) addresses, browser type, internet service provider (ISP), referring/exit pages, operating system, date/time stamp, file downloads, and license acceptance. We use this information to analyze trends, to administer the Site, to track users' movements around the Site, to enhance your experience in using our Site, and to gather demographic information about our user base as a whole. This information is used to better understand and improve the usability, performance, and effectiveness of the Site.","title":"Log Files"},{"location":"privacy/#cookies","text":"Some web pages use \"cookies,\" which are small files saved on your computer. Cookies help us recognize your user preferences and can improve your future web visits. You can set your web browser to notify you when you are receiving a cookie and choose to reject it. However, rejecting cookies may affect the performance of the Site and prevent you from accessing certain Accellera Systems Initiative information.","title":"Cookies"},{"location":"privacy/#communications","text":"","title":"Communications"},{"location":"privacy/#working-group-and-event-related-announcements","text":"We may occasionally send you information on important Accellera Systems Initiative technical advancements and events that might be of interest to you. Out of respect for your privacy, we present the option not to receive these types of communications. Please see Choice and Opt-Out below.","title":"Working Group and Event-related Announcements"},{"location":"privacy/#newsletters","text":"We will occasionally use your name and email address to send newsletters to you. Out of respect for your privacy, we provide you a way to unsubscribe. Please see Choice and Opt-Out below.","title":"Newsletters"},{"location":"privacy/#information-sharing-and-disclosure","text":"","title":"Information Sharing and Disclosure"},{"location":"privacy/#personally-identifiable-information","text":"In addition to any sharing of personally identifiable information otherwise detailed in this policy, we may occasionally share personally identifiable information with third parties acting as either agents or service providers acting on our behalf.","title":"Personally Identifiable Information"},{"location":"privacy/#site-registration","text":"When you register to use the Site, we may use this information to contact you about the services on our Site in which you have expressed interest. We do not share this information other than as necessary to enable subcontractors to provide you with the services of the Site or otherwise as you have requested.","title":"Site Registration"},{"location":"privacy/#event-registration","text":"If you register for an event (whether sponsored by, organized by, or otherwise related to Accellera Systems Initiative, including third-party events for which Accellera Systems Initiative provides a registration mechanism) on or in connection with the Site, the information you provide may be shared with the sponsors of the event and other Accellera Systems Initiative sponsors, and the use of your personal information will be subject to the relative applicable privacy policies.","title":"Event Registration"},{"location":"privacy/#video-viewing-registration","text":"Registration may be required to view videos posted on the Site. As with events, the information you provide in connection with such registration may be shared with the sponsors of the video and/or other Accellera Systems Initiative sponsors, and their use of your personal information will be subject to the relative applicable privacy policies.","title":"Video Viewing Registration"},{"location":"privacy/#surveys-or-contests","text":"From time to time we may provide you the opportunity to participate in contests or surveys on the Site or at a meeting. If you participate, we may request certain personally identifiable information from you. Participation in these surveys or contests is completely voluntary and you therefore have a choice whether or not to disclose this information. The requested information typically includes contact information (such as name and shipping address), and demographic information (such as zip code). We use this information to notify contest winners and award prizes, and sometimes to send participants an email newsletter if requested. In some cases, we may use a third-party service provider to conduct these surveys or contests; any such provider is subject to the limitations of this policy.","title":"Surveys or Contests"},{"location":"privacy/#agents-service-providers","text":"We use third parties to process membership fees and provide certain specific services on the Site, such as registration for certain events. When you sign up for these particular services, we may share your personal information as necessary with authorized third-party agents or contractors in order to provide the requested service or transaction. We only provide third-party agents and service providers with the minimum amount of personal information necessary to complete the requested service or transaction. We do not permit these companies to share or use personally identifiable information for any other purposes.","title":"Agents &amp; Service Providers"},{"location":"privacy/#legal-disclaimer","text":"We reserve the right to disclose your personally identifiable information as required by law and when we believe that disclosure is necessary to protect our rights and/or to comply with a judicial proceeding, court order, or legal process served on the Site. Also, we reserve the right to fully use and disclose any information collected via the Site that is not in a personally identifiable form.","title":"Legal Disclaimer"},{"location":"privacy/#links-to-other-sites","text":"This Site contains links to other websites that are not owned or controlled by Accellera Systems Initiative. Please be aware Accellera Systems Initiative is not responsible for the privacy practices of such other websites. When you leave our Site, we encourage you to be aware and to read the privacy statements of each and every website that collects personally identifiable information. This privacy statement applies only to information collected by Accellera Systems Initiative websites.","title":"Links to Other Sites"},{"location":"privacy/#discussion-forums","text":"If you use a Discussion Forum on the Site, you should be aware that any personally identifiable information you post in a publicly viewable area there can be read, collected, or used by other users of these forums, and could be used to send you unsolicited messages. We are not responsible for the personally identifiable information you choose to submit in these forums.","title":"Discussion Forums"},{"location":"privacy/#international-transfer","text":"Your information may be transferred to -- and maintained on -- computers located outside of your state, province, country, or other governmental jurisdiction where the privacy laws may not be as protective as those in your jurisdiction.","title":"International Transfer"},{"location":"privacy/#access-to-personally-identifiable-information","text":"We need your help in keeping the personally identifiable information you share with us accurate and up to date. When changes to your personal information occur, please update your account information using the mechanism provided on the Site. Please notify us of any other changes to your personal information (for example, if you change member company status).","title":"Access to Personally Identifiable Information"},{"location":"privacy/#choice-and-opt-out","text":"If you do not wish to receive any communications from us, you can opt out through the mechanism on the Site. You can also request that your account be deleted in its entirety. If you no longer wish to receive a particular newsletter or promotional communication, you may opt out of receiving it by following the instructions included in each respective newsletter or communication. Please note that other data recipients have their own data privacy policies, which may differ from ours and you would have to contact them separately with respect to opt-out requests.","title":"Choice and Opt-Out"},{"location":"privacy/#security","text":"Transmissions over the Internet are never 100% secure or error-free. However, security of your personal information is important to us. We follow generally accepted industry standards to protect the personal information submitted to us, both during transmission and once we receive it. It is your responsibility to safeguard any password and User ID you use to access the Site and to notify us at privacy@lists.accellera.org if you ever suspect that this password or User ID has been compromised. You are solely responsible for any unauthorized use of the Site conducted via your password and User ID. You can change your password and User ID through the mechanism on the Site.","title":"Security"},{"location":"privacy/#changes-in-this-privacy-policy","text":"We reserve the right to modify this privacy statement at any time, so please review it frequently. If we make material changes to this policy, we will post the revised policy here. When you visit the Site, you are accepting the current version of this privacy policy as posted on the Site at that time.","title":"Changes in this Privacy Policy"},{"location":"privacy/#contact-us","text":"If you have any questions or suggestions regarding our privacy policy, please contact us at privacy@lists.accellera.org .","title":"Contact Us"},{"location":"events/sced2016/","text":"SystemC Evolution Day 2016 Workshop on the Evolution of SystemC Standards Tuesday, May 3, 2016 Munich, Germany Highlights Enthusiastic SystemC User Community Joins Forces at First SystemC Evolution Day As a result of the high level of interest in the SystemC birds-of-a-feather session at DVCon Europe 2015, the SystemC user community met again earlier this month for a full day to discuss the evolution of the various SystemC standards. With more than 50 participants, the new Accellera-sponsored technical workshop was sold out, with representatives from more than 20 companies and seven universities in attendance. The main objective of the SystemC Evolution Day was to identify the areas to align and accelerate the different SystemC standardization initiatives within Accellera and propose solutions for standards inclusion. The workshop started with presentations covering user experiences and standardization proposals in the fields of high-level synthesis, parallel SystemC simulation, transaction-level modeling (TLM) and interactive tracing and debug. In the afternoon, various technical sessions focused on the interaction between multiple SystemC working groups addressing C++11/14 standard adoption, multi-threaded SystemC, TLM for serial interfaces and UVM-SystemC combined with Configuration Control and Inspection (CCI). In a wrap-up session, the main conclusions were shared, including proposals for further standardization. The material and presentations are available for Accellera members active in any of the SystemC working groups. The participants were all very excited to actively contribute to the success of this workshop. After the positive feedback from the attendees, the organization committee is exploring the best and most effective way to continue the workshop on a regular basis. Summary of the Event The first SystemC Evolution Day was a new full-day technical workshop on the evolution of SystemC standards to advance the SystemC ecosystem. In several in-depth sessions, selected current and future standardization topics around SystemC were discussed in order to accelerate their progress for inclusion in Accellera and IEEE standards. The SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together the experts from the SystemC user community and the Accellera working groups to advance SystemC-related standards in a full day workshop. Date: 3 May 2016 Time: 10:00 - 18:00 CEST Location: Intel Deutschland, Am Campeon 10, 85579 Neubiberg, Munich, Germany Organization Team: Philipp A Hartmann, Intel Oliver Bell, Intel, Martin Barnasconi, NXP Matthias Bauer, Infineon Agenda Time (CEST) Title Presenter/Moderator Affiliation(s) 10:00 - 10:45 Welcome, Introduction, SystemC WG Updates Presentation Philipp A Hartmann 1 Martin Barnasconi 2 1 Intel 2 Accellera 10:45 - 12:45 Lightning Talks Addressing the HLS Coding Barrier Abstract | Presentation Dominik Strasser OneSpin Solutions Seven Obstacles in the Way of Parallel SystemC Simulation Abstract | Presentation Rainer D\u00f6mer University of California, Irvine Events and Timing in TLM - Extend and Clarify Abstract | Presentation Jakob Engblom Intel Corporation Tracing and Interactive Test/Debug in SystemC and SystemC AMS Abstract | Presentation Karsten Einwich COSEDA Technologies 12:45 - 13:45 Lunch break 13:45 \u2013 17:15 Technical Sessions 1.1 SystemC/TLM and Language Standards (C++11/14) Abstract | Presentation Ralph G\u00f6rgen OFFIS 1.2 Multi-Threaded SystemC and External Interfaces Abstract | Presentation Mark Burton Greensocs 2.1 TLM Standard for Serial Interfaces Abstract | Presentation Martin Schnieringer Bosch 2.2 UVM-SystemC & Configuration, Control and Inspection (CCI) Abstract | Presentation Martin Barnasconi NXP 13:45 \u2013 17:15 Wrap-up, next standardization steps, closing Presentation Lightning Talks In the morning a series of lightning talks are presented covering concrete, but smaller, standardization proposals as well as introducing new standardization needs around SystemC. For each of these short presentations, time for an interactive discussion will be included to gather feedback and support and for identifying the next steps towards standardization. Addressing the HLS Coding Barrier Presenter: Dominik Strasser, OneSpin Solutions The verification of code for HLS is an important SystemC application. By working with HLS customers in the formal verification area, a number of inconsistencies in the standard have emerged, which require non-standard solutions on a synthesis tool-by-tool basis. These include simulation-synthesis mismatches, differing number formats and others, reminiscent of the early RTL synthesis days. OneSpin would like to present its findings at the event and discuss how we might resolve these synthesis coding style issues, to enable more general verification tools to be applied in different synthesis flows. Seven Obstacles in the Way of Parallel SystemC Simulation Presenter: Rainer D\u00f6mer, University of California, Irvine, USA The IEEE 1666\u20102011 standard defines SystemC based on discrete event simulation and sequential co-routine semantics, despite explicit parallelism in the model and ample parallel processor cores available in today\u2019s host computers. In order to evolve the SystemC standard towards faster parallel discrete event simulation, substantial hurdles must be overcome. This presentation identifies seven obstacles in the standard that stand in the way of efficient parallel SystemC simulation, including the co\u2010operative multitasking semantics, the role of channels, TLM\u20102.0, sequential modeling mindset, and technical details. For each obstacle, we discuss the problem and propose a potential solution toward truly parallel SystemC. Events and Timing in TLM \u2013 Extend and Clarify Presenter: Jakob Engblom, Intel Corporation We propose a small addition to the TLM features of SystemC, a payload-enhanced event class, along with a mechanism that will let active initiators serve events to passive devices without involving the kernel, inside their own temporal decoupling time slice. By having a payload in the event, it is possible to write certain types of TLM code in a more natural way. By allowing one module to defer the execution of events to another module, more efficient scheduling of event-driven code and more consistent temporal decoupling semantics are made possible \u2013 at the cost of putting more responsibility on the initiators. Tracing and Interactive Test/Debug in SystemC and SystemC AMS Presenter: Karsten Einwich, COSEDA Technologies This presentation aims to initiate the discussion, whether the SystemC and SystemC-AMS tracing should/can be unified. The more flexible tracing infrastructure in SystemC AMS adds extended tracing capabilities around user-defined data type support as well as advanced control of the tracing during the simulation. Additionally, the SystemC AMS working group currently discusses to integrate an interactive debug feature, allowing to read/write/listen to values in the SystemC model in a consistent way. This feature can be generalized and should be make available for SystemC as well. Technical Sessions In the afternoon, technical in-depth sessions on ongoing standardization topics are held with a special focus on areas with overlap between multiple SystemC Working Groups. The following sessions are planned: 1.1 SystemC/TLM and Language Standards (C++11/14) Moderator: Ralph G\u00f6rgen, OFFIS The evolution of the C++ language \u2013 more specific: the new standards C++11 and C++14 \u2013 have introduced a number of features that can significantly improve quality, safety and performance. In this session, it is planned to discuss and evaluate how these features can be used efficiently by SystemC and TLM designers and methodology library providers and how they can leveraged to improve design productivity, model quality and simulation performance. This includes the exploration of possible extensions of the core SystemC languages for improved C++11 integration and the consequences for the underlying standards. 1.2 Multi-Threaded SystemC and External Interfaces Moderator: Mark Burton, GreenSocs There has been much research in the area of multi-threading SystemC, both at the level of processes and threads and at the level of models themselves, both automatic and co-operative. In this topic, we welcome contributions about how SystemC itself can be made more parallel, and how multi-threaded models can be deployed in SystemC. As it is closely related, we also welcome contributions that explore the integration of external simulators and models into SystemC, especially where those simulators are themselves multi-threaded. The eventual aim of this topic will be to propose additions to the language which will facilitate multi-threading as well as interfaces to foreign simulation environments that will support multi-threading. 2.1 TLM Standard for Serial Interfaces Moderator: Martin Schnieringer, Bosch TLM 2.0 as part of IEEE 1666-2011 is a well-defined and widely deployed abstraction level for on-chip memory mapped components connected via buses and interconnects, enabling quick platform assembly. For common (automotive) serial protocols such as SPI, CAN, FlexRay, I2C, etc., no such modeling is established yet, resulting in additional integration effort of various ad-hoc solutions from different sources. In this session, ongoing activities in that area are presented and discussed, including requirements and scenarios that shall be supported by such a standard for TLM Serial Interfaces. Additionally, the potential reuse of existing TLM 2.0 components such as interfaces, sockets, phases, payloads etc. and missing elements required for allowing easy and intuitive modeling of serial interfaces will be explored. 2.2 UVM-SystemC & Configuration, Control and Inspection (CCI) Moderator: Martin Barnasconi, NXP Accellera\u2019s Universal Verification Methodology (UVM), originally developed in SystemVerilog, is now made available in SystemC to facilitate the creation and reuse of system-level verification components and environments. The UVM-SystemC library offers dedicated verification functionality such as fine-grained simulation phases, factory overrides, configuration management, register model, and test and stimuli control. In parallel, the SystemC Configuration, Control and Inspection (CCI) standard is under development for the exchange of information between the design under verification (DUV) and tooling. The objective of this session is to align and unite the proposed methods for the DUV register configuration and control, from a test bench and tools perspective. Wrap-up After the technical sessions, a dedicated wrap-up slot will be used to present the main results from the different in-depth discussions, summarizing next steps for further progressing these topics within the relevant Accellera SystemC Working Groups by the Accellera members. If you would like to become an Accellera member to participate in the working groups, information on how to join can be found at www.accellera.org/about/join. Contact us systemc-evolution-day@lists.accellera.org","title":"SystemC Evolution Day 2016"},{"location":"events/sced2016/#systemc-evolution-day-2016","text":"Workshop on the Evolution of SystemC Standards Tuesday, May 3, 2016 Munich, Germany","title":"SystemC Evolution Day 2016 "},{"location":"events/sced2016/#highlights","text":"Enthusiastic SystemC User Community Joins Forces at First SystemC Evolution Day As a result of the high level of interest in the SystemC birds-of-a-feather session at DVCon Europe 2015, the SystemC user community met again earlier this month for a full day to discuss the evolution of the various SystemC standards. With more than 50 participants, the new Accellera-sponsored technical workshop was sold out, with representatives from more than 20 companies and seven universities in attendance. The main objective of the SystemC Evolution Day was to identify the areas to align and accelerate the different SystemC standardization initiatives within Accellera and propose solutions for standards inclusion. The workshop started with presentations covering user experiences and standardization proposals in the fields of high-level synthesis, parallel SystemC simulation, transaction-level modeling (TLM) and interactive tracing and debug. In the afternoon, various technical sessions focused on the interaction between multiple SystemC working groups addressing C++11/14 standard adoption, multi-threaded SystemC, TLM for serial interfaces and UVM-SystemC combined with Configuration Control and Inspection (CCI). In a wrap-up session, the main conclusions were shared, including proposals for further standardization. The material and presentations are available for Accellera members active in any of the SystemC working groups. The participants were all very excited to actively contribute to the success of this workshop. After the positive feedback from the attendees, the organization committee is exploring the best and most effective way to continue the workshop on a regular basis.","title":"Highlights"},{"location":"events/sced2016/#summary-of-the-event","text":"The first SystemC Evolution Day was a new full-day technical workshop on the evolution of SystemC standards to advance the SystemC ecosystem. In several in-depth sessions, selected current and future standardization topics around SystemC were discussed in order to accelerate their progress for inclusion in Accellera and IEEE standards. The SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together the experts from the SystemC user community and the Accellera working groups to advance SystemC-related standards in a full day workshop. Date: 3 May 2016 Time: 10:00 - 18:00 CEST Location: Intel Deutschland, Am Campeon 10, 85579 Neubiberg, Munich, Germany","title":"Summary of the Event"},{"location":"events/sced2016/#organization-team","text":"Philipp A Hartmann, Intel Oliver Bell, Intel, Martin Barnasconi, NXP Matthias Bauer, Infineon","title":"Organization Team:"},{"location":"events/sced2016/#agenda","text":"Time (CEST) Title Presenter/Moderator Affiliation(s) 10:00 - 10:45 Welcome, Introduction, SystemC WG Updates Presentation Philipp A Hartmann 1 Martin Barnasconi 2 1 Intel 2 Accellera 10:45 - 12:45 Lightning Talks Addressing the HLS Coding Barrier Abstract | Presentation Dominik Strasser OneSpin Solutions Seven Obstacles in the Way of Parallel SystemC Simulation Abstract | Presentation Rainer D\u00f6mer University of California, Irvine Events and Timing in TLM - Extend and Clarify Abstract | Presentation Jakob Engblom Intel Corporation Tracing and Interactive Test/Debug in SystemC and SystemC AMS Abstract | Presentation Karsten Einwich COSEDA Technologies 12:45 - 13:45 Lunch break 13:45 \u2013 17:15 Technical Sessions 1.1 SystemC/TLM and Language Standards (C++11/14) Abstract | Presentation Ralph G\u00f6rgen OFFIS 1.2 Multi-Threaded SystemC and External Interfaces Abstract | Presentation Mark Burton Greensocs 2.1 TLM Standard for Serial Interfaces Abstract | Presentation Martin Schnieringer Bosch 2.2 UVM-SystemC & Configuration, Control and Inspection (CCI) Abstract | Presentation Martin Barnasconi NXP 13:45 \u2013 17:15 Wrap-up, next standardization steps, closing Presentation","title":"Agenda"},{"location":"events/sced2016/#lightning-talks","text":"In the morning a series of lightning talks are presented covering concrete, but smaller, standardization proposals as well as introducing new standardization needs around SystemC. For each of these short presentations, time for an interactive discussion will be included to gather feedback and support and for identifying the next steps towards standardization.","title":"Lightning Talks"},{"location":"events/sced2016/#addressing-the-hls-coding-barrier","text":"Presenter: Dominik Strasser, OneSpin Solutions The verification of code for HLS is an important SystemC application. By working with HLS customers in the formal verification area, a number of inconsistencies in the standard have emerged, which require non-standard solutions on a synthesis tool-by-tool basis. These include simulation-synthesis mismatches, differing number formats and others, reminiscent of the early RTL synthesis days. OneSpin would like to present its findings at the event and discuss how we might resolve these synthesis coding style issues, to enable more general verification tools to be applied in different synthesis flows.","title":"Addressing the HLS Coding Barrier"},{"location":"events/sced2016/#seven-obstacles-in-the-way-of-parallel-systemc-simulation","text":"Presenter: Rainer D\u00f6mer, University of California, Irvine, USA The IEEE 1666\u20102011 standard defines SystemC based on discrete event simulation and sequential co-routine semantics, despite explicit parallelism in the model and ample parallel processor cores available in today\u2019s host computers. In order to evolve the SystemC standard towards faster parallel discrete event simulation, substantial hurdles must be overcome. This presentation identifies seven obstacles in the standard that stand in the way of efficient parallel SystemC simulation, including the co\u2010operative multitasking semantics, the role of channels, TLM\u20102.0, sequential modeling mindset, and technical details. For each obstacle, we discuss the problem and propose a potential solution toward truly parallel SystemC.","title":"Seven Obstacles in the Way of Parallel SystemC Simulation"},{"location":"events/sced2016/#events-and-timing-in-tlm-extend-and-clarify","text":"Presenter: Jakob Engblom, Intel Corporation We propose a small addition to the TLM features of SystemC, a payload-enhanced event class, along with a mechanism that will let active initiators serve events to passive devices without involving the kernel, inside their own temporal decoupling time slice. By having a payload in the event, it is possible to write certain types of TLM code in a more natural way. By allowing one module to defer the execution of events to another module, more efficient scheduling of event-driven code and more consistent temporal decoupling semantics are made possible \u2013 at the cost of putting more responsibility on the initiators.","title":"Events and Timing in TLM \u2013 Extend and Clarify"},{"location":"events/sced2016/#tracing-and-interactive-testdebug-in-systemc-and-systemc-ams","text":"Presenter: Karsten Einwich, COSEDA Technologies This presentation aims to initiate the discussion, whether the SystemC and SystemC-AMS tracing should/can be unified. The more flexible tracing infrastructure in SystemC AMS adds extended tracing capabilities around user-defined data type support as well as advanced control of the tracing during the simulation. Additionally, the SystemC AMS working group currently discusses to integrate an interactive debug feature, allowing to read/write/listen to values in the SystemC model in a consistent way. This feature can be generalized and should be make available for SystemC as well.","title":"Tracing and Interactive Test/Debug in SystemC and SystemC AMS"},{"location":"events/sced2016/#technical-sessions","text":"In the afternoon, technical in-depth sessions on ongoing standardization topics are held with a special focus on areas with overlap between multiple SystemC Working Groups. The following sessions are planned:","title":"Technical Sessions"},{"location":"events/sced2016/#11-systemctlm-and-language-standards-c1114","text":"Moderator: Ralph G\u00f6rgen, OFFIS The evolution of the C++ language \u2013 more specific: the new standards C++11 and C++14 \u2013 have introduced a number of features that can significantly improve quality, safety and performance. In this session, it is planned to discuss and evaluate how these features can be used efficiently by SystemC and TLM designers and methodology library providers and how they can leveraged to improve design productivity, model quality and simulation performance. This includes the exploration of possible extensions of the core SystemC languages for improved C++11 integration and the consequences for the underlying standards.","title":"1.1 SystemC/TLM and Language Standards (C++11/14)"},{"location":"events/sced2016/#12-multi-threaded-systemc-and-external-interfaces","text":"Moderator: Mark Burton, GreenSocs There has been much research in the area of multi-threading SystemC, both at the level of processes and threads and at the level of models themselves, both automatic and co-operative. In this topic, we welcome contributions about how SystemC itself can be made more parallel, and how multi-threaded models can be deployed in SystemC. As it is closely related, we also welcome contributions that explore the integration of external simulators and models into SystemC, especially where those simulators are themselves multi-threaded. The eventual aim of this topic will be to propose additions to the language which will facilitate multi-threading as well as interfaces to foreign simulation environments that will support multi-threading.","title":"1.2 Multi-Threaded SystemC and External Interfaces"},{"location":"events/sced2016/#21-tlm-standard-for-serial-interfaces","text":"Moderator: Martin Schnieringer, Bosch TLM 2.0 as part of IEEE 1666-2011 is a well-defined and widely deployed abstraction level for on-chip memory mapped components connected via buses and interconnects, enabling quick platform assembly. For common (automotive) serial protocols such as SPI, CAN, FlexRay, I2C, etc., no such modeling is established yet, resulting in additional integration effort of various ad-hoc solutions from different sources. In this session, ongoing activities in that area are presented and discussed, including requirements and scenarios that shall be supported by such a standard for TLM Serial Interfaces. Additionally, the potential reuse of existing TLM 2.0 components such as interfaces, sockets, phases, payloads etc. and missing elements required for allowing easy and intuitive modeling of serial interfaces will be explored.","title":"2.1 TLM Standard for Serial Interfaces"},{"location":"events/sced2016/#22-uvm-systemc-configuration-control-and-inspection-cci","text":"Moderator: Martin Barnasconi, NXP Accellera\u2019s Universal Verification Methodology (UVM), originally developed in SystemVerilog, is now made available in SystemC to facilitate the creation and reuse of system-level verification components and environments. The UVM-SystemC library offers dedicated verification functionality such as fine-grained simulation phases, factory overrides, configuration management, register model, and test and stimuli control. In parallel, the SystemC Configuration, Control and Inspection (CCI) standard is under development for the exchange of information between the design under verification (DUV) and tooling. The objective of this session is to align and unite the proposed methods for the DUV register configuration and control, from a test bench and tools perspective.","title":"2.2 UVM-SystemC &amp; Configuration, Control and Inspection (CCI)"},{"location":"events/sced2016/#wrap-up","text":"After the technical sessions, a dedicated wrap-up slot will be used to present the main results from the different in-depth discussions, summarizing next steps for further progressing these topics within the relevant Accellera SystemC Working Groups by the Accellera members. If you would like to become an Accellera member to participate in the working groups, information on how to join can be found at www.accellera.org/about/join.","title":"Wrap-up"},{"location":"events/sced2016/#contact-us","text":"systemc-evolution-day@lists.accellera.org","title":"Contact us"},{"location":"events/sced2017/","text":"SystemC Evolution Day 2017 Workshop on the Evolution of SystemC Standards Wednesday, October 18, 2017 Munich, Germany Highlights As a follow-up to the first SystemC Evolution Day in May 2016 , the SystemC user community met again right after DVCon Europe 2017 for the second edition of this full day technical workshop to discuss the evolution of the various SystemC standards. With more than 60 participants, the Accellera-sponsored event was sold out again, with representatives from over 25 companies and academic institutions in attendance. The main objective of the SystemC Evolution Day series is to identify areas in which to align and accelerate the different SystemC standardization initiatives within Accellera and work towards solution proposals for standards inclusion. The discussions were centered around four in-depth technical sessions in the fields of SystemC checkpointing support, register inspection and debug, datatypes, and protocol modeling for high-level synthesis. During the open wrap-up session, additional topics were discussed such as clock/reset/interrupt modeling, parallel/distributed simulations, and others. The material and presentations are shared with the Accellera SystemC Working Groups for follow-up discussions. With the continuing success of this workshop format and the very positive feedback from the attendees, the organization committee is exploring options to further enhance the format for future editions of the SystemC Evolution Day. Summary of the Event The second SystemC Evolution Day was a full-day technical workshop on the evolution of SystemC standards to advance the SystemC ecosystem. In several in-depth sessions, selected current and future standardization topics around SystemC were discussed in order to accelerate their progress for inclusion in Accellera and IEEE standards. The SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together the experts from the SystemC user community and the Accellera working groups to advance SystemC-related standards in a full day workshop. Date: 18 October 2017 (day after DVCon Europe 2017) Time: 8:30 - 17:00 CEST Location: Technical University of Munich, City Campus, Arcisstra\u00dfe 21, 80333 Munich, Germany Organization Team: Philipp A Hartmann, Intel Oliver Bell, Intel, Martin Barnasconi, NXP Matthias Bauer, Infineon Thomas Kruse, Infineon Agenda Time (CEST) Title Presenter(s) Affiliation(s) 8:30 - 9:00 Welcome coffee 9:00 - 9:15 Introduction, SystemC WG Updates Presentation Philipp A Hartmann 1 Martin Barnasconi 2 1 Intel 2 Accellera 9:15 - 10:15 Checkpointing and SystemC \u2013 How Can We Make Them Meet? Abstract | Presentation Jakob Engblom, H\u00e5kan Zeffer, Eric Nilsson, Philipp Hartmann, Trevor Wieman Intel 10:15 - 10:45 Coffee break 10:45 - 12:15 Standardization Around Registers - What's Needed? Abstract | Presentation Mark Burton 1 Jerome Cornet 2 1 Greensocs 2 ST Microelectronics 12:15 - 13:30 Lunch break 13:30 - 14:30 SystemC Datatypes - A Community Discussion Abstract | Presentation 1 | Presentation 2 Fred Doucet 1 Andres Takach 2 1 Qualcomm 2 Mentor Graphics, A Siemens Business 14:30 - 15:30 Throughput Accurate Modeling and Synthesis of Abstract Interfaces Abstract | Presentation Andres Takach Mentor Graphics, A Siemens Business 15:30 - 16:00 Coffee break 16:00 - 17:00 Wrap-up & Open Discussion on SystemC Standards Abstract Technical Sessions There are four in-depth technical sessions for directly discussing of new ideas and suggestions within the SystemC community. You are invited to contribute during these sessions. Checkpointing and SystemC \u2013 How Can We Make Them Meet? Organizers: Jakob Engblom, H\u00e5kan Zeffer, Eric Nilsson, Philipp Hartmann, and Trevor Wieman (Intel) Checkpointing is a useful feature of computer system simulators from at least the mid-1990s. Among other uses, checkpointing is used to transfer the state of a system between fast and detailed simulators; to save time in workflows by not redoing work like booting a system; as a collaboration tool between developers; and as a way to undo bad changes to a target system. Checkpointing is on the list of features being considered by the SystemC Configuration, Control, and Inspection Working Group (CCIWG). Checkpointing has proven tricky to implement in SystemC, mainly because it constrains how models are written \u2014 models have to be able to save and restore their state. To support moving checkpoints across hosts and between models at different abstraction levels, it should be possible to restore into a different implementation of the same model. Saving and restoring the entire state of a process or a virtual machine image achieves only part of the goal. There is a significant body of research available on checkpointing for SystemC that offer insights and ideas. In this session, we will look at the current understanding of checkpointing and how it can be implemented in SystemC. We want to discuss how an implementation can be made practical and get the input from the language design, modeling, tool building, and user communities on checkpointing for SystemC. As one starting point for the discussion, we will present a checkpointing library that we have developed at Intel in cooperation between the Simics team and SystemC users. Standardization around Registers \u2013 What\u2019s Needed? Organizers: Mark Burton (GreenSocs), Jerome Cornet (ST Microelectronics) As the CCIWG finally wraps up its work on configuration, one of the next topics on the group\u2019s charter is \u201cregisters.\u201d There are several aspects of this: What do users expect from register libraries? What actually needs standardizing? What advantages standardization brings to registers? Different organizations have different register modeling libraries, and different users will certainly have different experiences and requirements. Some proposals for standardization probably need revisiting as SystemC itself has evolved (and with the addition of CCI). Meanwhile, all of the current proposals are old (dating back at least five years in most cases). What\u2019s missing is the experience of users today and what is really needed from a user perspective. This topic session will present some of the proposals for standardization around registers, and we hope to elicit feedback from the user community \u2014 to ask the question, \"What is the next evolutionary step for registers?\" SystemC Datatypes - a Community Discussion Organizers: Fred Doucet (Qualcomm), Andres Takach (Mentor Graphics, a Siemens Business) Over the last fifteen years, SystemC users and EDA companies have been using the standard datatypes in different ways, either using the proof-of-concept library as is, or internally customizing it, or completely re-implementing the standard datatypes for simulation speed or synthesizability issues. The SystemC Datatypes Sub-Working Group has been chartered to incorporate many of these improvements (and more) by defining an advanced set of SystemC datatypes, suitable for all SystemC modeling domains from algorithmic models to synthesis. The goal of this interactive session is to engage the broader user community in the process of improving the datatypes. We will first discuss the various use models and issues of the current standard datatypes. We will then discuss two possible paths forward: (a) improving the current datatypes while keeping the existing API or (b) defining new datatypes with a slightly different API and backward compatibility. Throughput Accurate Modeling and Synthesis of Abstract Interfaces Organizer: Andres Takach (Mentor Graphics, a Siemens Business) Modeling and synthesis of abstract interfaces is not addressed in the current SystemC Synthesis standard. The standard covers signals and ports, but has no mention of the scheduling rules that are required for synthesizing the correct cycle accurate protocol. Ideally communication can be expressed in SystemC at a higher abstraction level, but with pin and protocol accurate interfaces so that it can model interactions with timing sensitive blocks such as arbiters and memories. Encapsulation of a protocol as a C++ class with methods to perform transaction-level operations such as get/read and put/write is a key way to raise the abstraction of an interface. High-level synthesis can treat the behavior in such operations as cycle accurate to preserve the intent of the protocol. While this encapsulation is elegant, it does not solve a fundamental problem that we would like to model the interaction of different ports that are being accessed from a process (SC_THREAD or SC_CTHREAD) as being concurrent. While it is possible to write behavior in a thread that handles multiple ports, this becomes a cross product of the sequential behavior of each protocol making it non-scalable and non-modular. It also reduces the freedom to schedule the port accesses to be initiated in different cycles. Unless we can model concurrency in the access to various ports within a thread, the SystemC model runs at a slower throughput than the desired hardware would. While still functionally correct/equivalent for latency-insensitive designs, this does not accurately model interactions with arbiters, etc. This in-depth session covers the topic of modeling of abstract interfaces and how it relates to high-level synthesis of that model. The interactive discussion aims to explore approaches that could lead to proposals for expanding the SystemC Synthesis standard in this area. Wrap-up & Open Discussion on SystemC Standards After the technical sessions, an open discussion session will be used to summarize the next steps for further progressing within the relevant Accellera SystemC Working Groups by the Accellera members on the session topics as well as additional opens brought up during the closing discussion. If you would like to become an Accellera member to participate in the working groups, information on how to join can be found here . Contact us systemc-evolution-day@lists.accellera.org","title":"SystemC Evolution Day 2017"},{"location":"events/sced2017/#systemc-evolution-day-2017","text":"Workshop on the Evolution of SystemC Standards Wednesday, October 18, 2017 Munich, Germany","title":"SystemC Evolution Day 2017 "},{"location":"events/sced2017/#highlights","text":"As a follow-up to the first SystemC Evolution Day in May 2016 , the SystemC user community met again right after DVCon Europe 2017 for the second edition of this full day technical workshop to discuss the evolution of the various SystemC standards. With more than 60 participants, the Accellera-sponsored event was sold out again, with representatives from over 25 companies and academic institutions in attendance. The main objective of the SystemC Evolution Day series is to identify areas in which to align and accelerate the different SystemC standardization initiatives within Accellera and work towards solution proposals for standards inclusion. The discussions were centered around four in-depth technical sessions in the fields of SystemC checkpointing support, register inspection and debug, datatypes, and protocol modeling for high-level synthesis. During the open wrap-up session, additional topics were discussed such as clock/reset/interrupt modeling, parallel/distributed simulations, and others. The material and presentations are shared with the Accellera SystemC Working Groups for follow-up discussions. With the continuing success of this workshop format and the very positive feedback from the attendees, the organization committee is exploring options to further enhance the format for future editions of the SystemC Evolution Day.","title":"Highlights"},{"location":"events/sced2017/#summary-of-the-event","text":"The second SystemC Evolution Day was a full-day technical workshop on the evolution of SystemC standards to advance the SystemC ecosystem. In several in-depth sessions, selected current and future standardization topics around SystemC were discussed in order to accelerate their progress for inclusion in Accellera and IEEE standards. The SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together the experts from the SystemC user community and the Accellera working groups to advance SystemC-related standards in a full day workshop. Date: 18 October 2017 (day after DVCon Europe 2017) Time: 8:30 - 17:00 CEST Location: Technical University of Munich, City Campus, Arcisstra\u00dfe 21, 80333 Munich, Germany","title":"Summary of the Event"},{"location":"events/sced2017/#organization-team","text":"Philipp A Hartmann, Intel Oliver Bell, Intel, Martin Barnasconi, NXP Matthias Bauer, Infineon Thomas Kruse, Infineon","title":"Organization Team:"},{"location":"events/sced2017/#agenda","text":"Time (CEST) Title Presenter(s) Affiliation(s) 8:30 - 9:00 Welcome coffee 9:00 - 9:15 Introduction, SystemC WG Updates Presentation Philipp A Hartmann 1 Martin Barnasconi 2 1 Intel 2 Accellera 9:15 - 10:15 Checkpointing and SystemC \u2013 How Can We Make Them Meet? Abstract | Presentation Jakob Engblom, H\u00e5kan Zeffer, Eric Nilsson, Philipp Hartmann, Trevor Wieman Intel 10:15 - 10:45 Coffee break 10:45 - 12:15 Standardization Around Registers - What's Needed? Abstract | Presentation Mark Burton 1 Jerome Cornet 2 1 Greensocs 2 ST Microelectronics 12:15 - 13:30 Lunch break 13:30 - 14:30 SystemC Datatypes - A Community Discussion Abstract | Presentation 1 | Presentation 2 Fred Doucet 1 Andres Takach 2 1 Qualcomm 2 Mentor Graphics, A Siemens Business 14:30 - 15:30 Throughput Accurate Modeling and Synthesis of Abstract Interfaces Abstract | Presentation Andres Takach Mentor Graphics, A Siemens Business 15:30 - 16:00 Coffee break 16:00 - 17:00 Wrap-up & Open Discussion on SystemC Standards Abstract","title":"Agenda"},{"location":"events/sced2017/#technical-sessions","text":"There are four in-depth technical sessions for directly discussing of new ideas and suggestions within the SystemC community. You are invited to contribute during these sessions.","title":"Technical Sessions"},{"location":"events/sced2017/#checkpointing-and-systemc-how-can-we-make-them-meet","text":"Organizers: Jakob Engblom, H\u00e5kan Zeffer, Eric Nilsson, Philipp Hartmann, and Trevor Wieman (Intel) Checkpointing is a useful feature of computer system simulators from at least the mid-1990s. Among other uses, checkpointing is used to transfer the state of a system between fast and detailed simulators; to save time in workflows by not redoing work like booting a system; as a collaboration tool between developers; and as a way to undo bad changes to a target system. Checkpointing is on the list of features being considered by the SystemC Configuration, Control, and Inspection Working Group (CCIWG). Checkpointing has proven tricky to implement in SystemC, mainly because it constrains how models are written \u2014 models have to be able to save and restore their state. To support moving checkpoints across hosts and between models at different abstraction levels, it should be possible to restore into a different implementation of the same model. Saving and restoring the entire state of a process or a virtual machine image achieves only part of the goal. There is a significant body of research available on checkpointing for SystemC that offer insights and ideas. In this session, we will look at the current understanding of checkpointing and how it can be implemented in SystemC. We want to discuss how an implementation can be made practical and get the input from the language design, modeling, tool building, and user communities on checkpointing for SystemC. As one starting point for the discussion, we will present a checkpointing library that we have developed at Intel in cooperation between the Simics team and SystemC users.","title":"Checkpointing and SystemC \u2013 How Can We Make Them Meet?"},{"location":"events/sced2017/#standardization-around-registers-whats-needed","text":"Organizers: Mark Burton (GreenSocs), Jerome Cornet (ST Microelectronics) As the CCIWG finally wraps up its work on configuration, one of the next topics on the group\u2019s charter is \u201cregisters.\u201d There are several aspects of this: What do users expect from register libraries? What actually needs standardizing? What advantages standardization brings to registers? Different organizations have different register modeling libraries, and different users will certainly have different experiences and requirements. Some proposals for standardization probably need revisiting as SystemC itself has evolved (and with the addition of CCI). Meanwhile, all of the current proposals are old (dating back at least five years in most cases). What\u2019s missing is the experience of users today and what is really needed from a user perspective. This topic session will present some of the proposals for standardization around registers, and we hope to elicit feedback from the user community \u2014 to ask the question, \"What is the next evolutionary step for registers?\"","title":"Standardization around Registers \u2013 What\u2019s Needed?"},{"location":"events/sced2017/#systemc-datatypes-a-community-discussion","text":"Organizers: Fred Doucet (Qualcomm), Andres Takach (Mentor Graphics, a Siemens Business) Over the last fifteen years, SystemC users and EDA companies have been using the standard datatypes in different ways, either using the proof-of-concept library as is, or internally customizing it, or completely re-implementing the standard datatypes for simulation speed or synthesizability issues. The SystemC Datatypes Sub-Working Group has been chartered to incorporate many of these improvements (and more) by defining an advanced set of SystemC datatypes, suitable for all SystemC modeling domains from algorithmic models to synthesis. The goal of this interactive session is to engage the broader user community in the process of improving the datatypes. We will first discuss the various use models and issues of the current standard datatypes. We will then discuss two possible paths forward: (a) improving the current datatypes while keeping the existing API or (b) defining new datatypes with a slightly different API and backward compatibility.","title":"SystemC Datatypes - a Community Discussion"},{"location":"events/sced2017/#throughput-accurate-modeling-and-synthesis-of-abstract-interfaces","text":"Organizer: Andres Takach (Mentor Graphics, a Siemens Business) Modeling and synthesis of abstract interfaces is not addressed in the current SystemC Synthesis standard. The standard covers signals and ports, but has no mention of the scheduling rules that are required for synthesizing the correct cycle accurate protocol. Ideally communication can be expressed in SystemC at a higher abstraction level, but with pin and protocol accurate interfaces so that it can model interactions with timing sensitive blocks such as arbiters and memories. Encapsulation of a protocol as a C++ class with methods to perform transaction-level operations such as get/read and put/write is a key way to raise the abstraction of an interface. High-level synthesis can treat the behavior in such operations as cycle accurate to preserve the intent of the protocol. While this encapsulation is elegant, it does not solve a fundamental problem that we would like to model the interaction of different ports that are being accessed from a process (SC_THREAD or SC_CTHREAD) as being concurrent. While it is possible to write behavior in a thread that handles multiple ports, this becomes a cross product of the sequential behavior of each protocol making it non-scalable and non-modular. It also reduces the freedom to schedule the port accesses to be initiated in different cycles. Unless we can model concurrency in the access to various ports within a thread, the SystemC model runs at a slower throughput than the desired hardware would. While still functionally correct/equivalent for latency-insensitive designs, this does not accurately model interactions with arbiters, etc. This in-depth session covers the topic of modeling of abstract interfaces and how it relates to high-level synthesis of that model. The interactive discussion aims to explore approaches that could lead to proposals for expanding the SystemC Synthesis standard in this area.","title":"Throughput Accurate Modeling and Synthesis of Abstract Interfaces"},{"location":"events/sced2017/#wrap-up-open-discussion-on-systemc-standards","text":"After the technical sessions, an open discussion session will be used to summarize the next steps for further progressing within the relevant Accellera SystemC Working Groups by the Accellera members on the session topics as well as additional opens brought up during the closing discussion. If you would like to become an Accellera member to participate in the working groups, information on how to join can be found here .","title":"Wrap-up &amp; Open Discussion on SystemC Standards"},{"location":"events/sced2017/#contact-us","text":"systemc-evolution-day@lists.accellera.org","title":"Contact us"},{"location":"events/sced2018/","text":"SystemC Evolution Day 2018 Workshop on the Evolution of SystemC Standards Tuesday, October 23, 2018 Holiday Inn Munich City, Germany The third SystemC Evolution Day was a full-day, technical workshop on the evolution of SystemC standards to advance the SystemC eco-system. In several in-depth sessions, selected current and future standardization topics around SystemC were discussed in order to accelerate their progress for Accellera/IEEE standard\u2019s inclusion. SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together the experts from the SystemC user community and the Accellera Working Groups to advance the SystemC standards. This is the third event after a successful second edition in October 2017 . Date: 23 October 2018 (day after DVCon Europe 2018) Time: 10:00 - 18:00 CEST Location: Holiday Inn Munich City Centre, Hochstrasse 3, 81669 Munich, Germany Organization Team: Philipp A Hartmann, Intel Oliver Bell, Intel, Martin Barnasconi, NXP Joachim Geishauser, NXP Matthias Bauer, Infineon Volkan Esen, Infineon Andrew Stevens, Infineon Agenda Time (CEST) Title Presenter(s) Affiliation(s) 9:30 - 10:00 Welcome coffee 10:00 - 10:45 Introduction, Brief SystemC WG Update Presentation Philipp A Hartmann 1 Martin Barnasconi 2 1 Intel 2 Accellera 10:45 \u2013 11:15 SystemC AMS Update Abstract | Presentation Karsten Einwich COSEDA Technologies GmbH 11:15 \u2013 11:45 Coffee break 11:45 \u2013 12:45 SystemC Multi-Language Requirements Abstract | Presentation Martin Barnasconi NXP 12:45 \u2013 14:00 Lunch break * 14:00 \u2013 15:00 Where are we on CCI? Abstract | Presentation Philipp A Hartmann Intel 15:00 \u2013 15:30 Functional coverage for SystemC (FC4SC) Abstract | Presentation Dragos Dospinescu AMIQ 15:30 \u2013 16:00 Coffee break 16:00 \u2013 16:45 TLM developments & proposals Abstract | Presentation 1 | Presentation 2 Joachim Geishauser 1 Ingo Feldner 2 1 NXP 2 Robert Bosch 15:30 \u2013 16:00 Open discussion on SystemC standards Abstract 17:30 \u2013 17:45 Wrap-up & Closing * Courtesy of Accellera, Cadence, Mentor A Siemens Business, and Synopsys Technical Sessions There are five in-depth technical sessions for directly discussing of new ideas and suggestions within the SystemC community. You are invited to contribute during these sessions. SystemC AMS Update Organizers: Karsten Einwich, COSEDA Technologies GmbH The lightning talk will give an update of the SystemC AMS working group activities. The new features discussed for the next standard update will be presented. The goal is to gain feedback from the community. In the second part proposals for the SystemC language standard from an AMS use case and SystemC AMS implementation perspective will be presented to initiate the discussion. SystemC Multi-language Requirements Organizers: Martin Barnasconi, NXP; Faris Khundakjie, Intel; Alex Chudnovsky; Vitaly Yankelevich, Cadence; Warren Stapleton; Bryan Sniderman, AMD The proposed talk will present the requirements and enhancements to apply the SystemC Library in the context of multi-language verification frameworks. The Accellera Multi-Language Verification Working Group (MLVWG) is currently working on a proof-of-concept which introduces and validates these enhancements to the SystemC library in such a multi-language verification framework. To align on the potential to standardize and implement such features in the SystemC standard and library, a technical discussion at the SystemC evolution day is suggested. Where Are We on CCI? Organizers: Jakob Engblom, Philipp A Hartmann, Trevor Wieman, Intel This session provides an update on the CCI standard and an opportunity for feedback from the audience. The CCI Configuration standard was released in June of 2018 \u2013 what is the current uptake? We want to hear from the audience about their experience so far! We will also discuss the direction of CCI for 2019. Functional Coverage for SystemC Organizer: Dragos Dospinescu, AMIQ Functional coverage lies at the core of functional verification as the primary metric that assesses the quality of the entire verification process. This notion of functional coverage can be extended from the scope of RTL verification to the verification of any type of application. The Functional Coverage for SystemC (FC4SC) library provides mechanisms for functional coverage definition, collection and reporting that can be used in any application which is compliant with the C++ standard, starting with C++11. Because FC4SC is a header-only library and has no dependency on any third party library, it can be integrated with minimal effort into any application. In addition, the library provides an API that closely resembles functional coverage definition and usage defined by the IEEE 1800-2017 standard, facilitating the transition from SystemVerilog to FC4SC also allowing the possibility of developing tools for functional coverage conversion between the two. The library saves collected data in the UCIS format in order to be compatible with existing functional coverage tools provided by 3rd party vendors (e.g. Cadence, Mentor, Synopsys). FC4SC use cases primarily involve (but are not limited to) measuring the level of exercise of SystemC models in order to track the features that are tested. This includes anything ranging from block level functional coverage, up to system level scenarios. TLM Developments & Proposals Organizers: Joachim Geishauser, NXP; Ingo Feldner, Robert Bosch This section will discuss different TLM developments, e.g. the application of TLM for serial interfaces, as well as a generic payload enhancement proposal. Open Discussion on SystemC Standards After the technical sessions, an open discussion session will be used to summarize the next steps for further progressing within the relevant Accellera SystemC Working Groups by the Accellera members on the session topics as well as additional opens brought up during the closing discussion. If you would like to become an Accellera member to participate in the working groups, information on how to join can be found here . Contact us systemc-evolution-day@lists.accellera.org Special thanks to the SystemC Evolution Day event sponsors:","title":"SystemC Evolution Day 2018"},{"location":"events/sced2018/#systemc-evolution-day-2018","text":"Workshop on the Evolution of SystemC Standards Tuesday, October 23, 2018 Holiday Inn Munich City, Germany The third SystemC Evolution Day was a full-day, technical workshop on the evolution of SystemC standards to advance the SystemC eco-system. In several in-depth sessions, selected current and future standardization topics around SystemC were discussed in order to accelerate their progress for Accellera/IEEE standard\u2019s inclusion. SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together the experts from the SystemC user community and the Accellera Working Groups to advance the SystemC standards. This is the third event after a successful second edition in October 2017 . Date: 23 October 2018 (day after DVCon Europe 2018) Time: 10:00 - 18:00 CEST Location: Holiday Inn Munich City Centre, Hochstrasse 3, 81669 Munich, Germany","title":"SystemC Evolution Day 2018 "},{"location":"events/sced2018/#organization-team","text":"Philipp A Hartmann, Intel Oliver Bell, Intel, Martin Barnasconi, NXP Joachim Geishauser, NXP Matthias Bauer, Infineon Volkan Esen, Infineon Andrew Stevens, Infineon","title":"Organization Team:"},{"location":"events/sced2018/#agenda","text":"Time (CEST) Title Presenter(s) Affiliation(s) 9:30 - 10:00 Welcome coffee 10:00 - 10:45 Introduction, Brief SystemC WG Update Presentation Philipp A Hartmann 1 Martin Barnasconi 2 1 Intel 2 Accellera 10:45 \u2013 11:15 SystemC AMS Update Abstract | Presentation Karsten Einwich COSEDA Technologies GmbH 11:15 \u2013 11:45 Coffee break 11:45 \u2013 12:45 SystemC Multi-Language Requirements Abstract | Presentation Martin Barnasconi NXP 12:45 \u2013 14:00 Lunch break * 14:00 \u2013 15:00 Where are we on CCI? Abstract | Presentation Philipp A Hartmann Intel 15:00 \u2013 15:30 Functional coverage for SystemC (FC4SC) Abstract | Presentation Dragos Dospinescu AMIQ 15:30 \u2013 16:00 Coffee break 16:00 \u2013 16:45 TLM developments & proposals Abstract | Presentation 1 | Presentation 2 Joachim Geishauser 1 Ingo Feldner 2 1 NXP 2 Robert Bosch 15:30 \u2013 16:00 Open discussion on SystemC standards Abstract 17:30 \u2013 17:45 Wrap-up & Closing * Courtesy of Accellera, Cadence, Mentor A Siemens Business, and Synopsys","title":"Agenda"},{"location":"events/sced2018/#technical-sessions","text":"There are five in-depth technical sessions for directly discussing of new ideas and suggestions within the SystemC community. You are invited to contribute during these sessions.","title":"Technical Sessions"},{"location":"events/sced2018/#systemc-ams-update","text":"Organizers: Karsten Einwich, COSEDA Technologies GmbH The lightning talk will give an update of the SystemC AMS working group activities. The new features discussed for the next standard update will be presented. The goal is to gain feedback from the community. In the second part proposals for the SystemC language standard from an AMS use case and SystemC AMS implementation perspective will be presented to initiate the discussion.","title":"SystemC AMS Update"},{"location":"events/sced2018/#systemc-multi-language-requirements","text":"Organizers: Martin Barnasconi, NXP; Faris Khundakjie, Intel; Alex Chudnovsky; Vitaly Yankelevich, Cadence; Warren Stapleton; Bryan Sniderman, AMD The proposed talk will present the requirements and enhancements to apply the SystemC Library in the context of multi-language verification frameworks. The Accellera Multi-Language Verification Working Group (MLVWG) is currently working on a proof-of-concept which introduces and validates these enhancements to the SystemC library in such a multi-language verification framework. To align on the potential to standardize and implement such features in the SystemC standard and library, a technical discussion at the SystemC evolution day is suggested.","title":"SystemC Multi-language Requirements"},{"location":"events/sced2018/#where-are-we-on-cci","text":"Organizers: Jakob Engblom, Philipp A Hartmann, Trevor Wieman, Intel This session provides an update on the CCI standard and an opportunity for feedback from the audience. The CCI Configuration standard was released in June of 2018 \u2013 what is the current uptake? We want to hear from the audience about their experience so far! We will also discuss the direction of CCI for 2019.","title":"Where Are We on CCI?"},{"location":"events/sced2018/#functional-coverage-for-systemc","text":"Organizer: Dragos Dospinescu, AMIQ Functional coverage lies at the core of functional verification as the primary metric that assesses the quality of the entire verification process. This notion of functional coverage can be extended from the scope of RTL verification to the verification of any type of application. The Functional Coverage for SystemC (FC4SC) library provides mechanisms for functional coverage definition, collection and reporting that can be used in any application which is compliant with the C++ standard, starting with C++11. Because FC4SC is a header-only library and has no dependency on any third party library, it can be integrated with minimal effort into any application. In addition, the library provides an API that closely resembles functional coverage definition and usage defined by the IEEE 1800-2017 standard, facilitating the transition from SystemVerilog to FC4SC also allowing the possibility of developing tools for functional coverage conversion between the two. The library saves collected data in the UCIS format in order to be compatible with existing functional coverage tools provided by 3rd party vendors (e.g. Cadence, Mentor, Synopsys). FC4SC use cases primarily involve (but are not limited to) measuring the level of exercise of SystemC models in order to track the features that are tested. This includes anything ranging from block level functional coverage, up to system level scenarios.","title":"Functional Coverage for SystemC"},{"location":"events/sced2018/#tlm-developments-proposals","text":"Organizers: Joachim Geishauser, NXP; Ingo Feldner, Robert Bosch This section will discuss different TLM developments, e.g. the application of TLM for serial interfaces, as well as a generic payload enhancement proposal.","title":"TLM Developments &amp; Proposals"},{"location":"events/sced2018/#open-discussion-on-systemc-standards","text":"After the technical sessions, an open discussion session will be used to summarize the next steps for further progressing within the relevant Accellera SystemC Working Groups by the Accellera members on the session topics as well as additional opens brought up during the closing discussion. If you would like to become an Accellera member to participate in the working groups, information on how to join can be found here .","title":"Open Discussion on SystemC Standards"},{"location":"events/sced2018/#contact-us","text":"systemc-evolution-day@lists.accellera.org","title":"Contact us"},{"location":"events/sced2018/#special-thanks-to-the-systemc-evolution-day-event-sponsors","text":"","title":"Special thanks to the SystemC Evolution Day event sponsors:"},{"location":"events/sced2019/","text":"SystemC Evolution Day 2019 Workshop on the Evolution of SystemC Standards Thursday, October 31, 2019 Holiday Inn Munich City, Germany The fourth SystemC Evolution Day was a full-day, technical workshop on the evolution of SystemC standards to advance the SystemC ecosystem. In several in-depth sessions, selected current and future standardization topics around SystemC will be discussed in order to accelerate their progress for inclusion in Accellera/IEEE standards. SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together experts from the SystemC user community and the Accellera Working Groups to advance SystemC standards. Date: 31 October 2019 (day after DVCon Europe 2019) Time: 9:30 - 18:00 CEST Location: Holiday Inn Munich City Centre, Hochstrasse 3, 81669 Munich, Germany Registration fees: \u20ac25 (Advance until 27 Sept) | \u20ac35 (on-site) plus 19%VAT Organization Team: Oliver Bell, Intel (Chair) Martin Barnasconi, NXP Andrew Stevens, Infineon Ola Dahl, Ericsson Philipp A. Hartmann, Intel Volkan Esen, Infineon Ingo Feldner, Bosch Tran Nguyen, ARM Manfred Thanner, NXP Jerome Cornet, ST Agenda Time (CEST) Title Presenter(s) Affiliation(s) 8:30 - 9:00 Welcome coffee 9:00 - 9:30 Introduction, Brief SystemC WG Standardization Update Presentation Oliver Bell 1 Martin Barnasconi 2 1 Intel 2 Accellera 9:30 - 10:15 SystemC and Digital Twin: Good match or Not? Presentation Martin Barnasconi NXP 10:15 \u2013 10:45 Coffee break \u2013 hosted by Accellera 10:45 \u2013 12:30 Simulation, Kernel Technology, Tracing Pushing the Limits of Standard-Compliant Parallel SystemC Simulation Presentation Rainer D\u00f6mer University of California, Irvine Synchronizing simulators, and Save and Restore Presentation Mark Burton Greensocs Improving the Usability and Performance of Tracing in SystemC Presentation Rauf Salimi, Philipp Hartmann Intel 12:30 \u2013 13:45 Lunch break - courtesy of Accellera, Cadence, Mentor A Siemens Business, and Synopsys 13:45 \u2013 15:00 TLM, Interoperability, Metrics Methodology for defining bus specific Programmer\u2019s View extensions to TLM2.0 Presentation Umesh Sisodia, Prince Arora CircuitSutra Technologies Pvt Ltd Follow up on GP extension standard, Clock and Reset SC standard Presentation Joachim Geishauser NXP SystemC Modeling Metrics Presentation Ingo Feldner, Tim Kraus Bosch 15:00 \u2013 15:30 Coffee break \u2013 hosted by Accellera 15:30 \u2013 17:00 Model Creation, High Level Synthesis Re-envisioning CCI inspection Presentation Bill Bunton 1 , Philipp Hartmann 1 , Michael Lebert 2 , Ola Dahl 2 1 Intel 2 Ericsson Advanced assertion checking in SystemC High-Level Synthesis flows Presentation Bob Condon Intel 17:00 \u2013 17:30 Wrap-up & Closing Contact us systemc-evolution-day@lists.accellera.org Special thanks to the SystemC Evolution Day event sponsors:","title":"SystemC Evolution Day 2019"},{"location":"events/sced2019/#systemc-evolution-day-2019","text":"Workshop on the Evolution of SystemC Standards Thursday, October 31, 2019 Holiday Inn Munich City, Germany The fourth SystemC Evolution Day was a full-day, technical workshop on the evolution of SystemC standards to advance the SystemC ecosystem. In several in-depth sessions, selected current and future standardization topics around SystemC will be discussed in order to accelerate their progress for inclusion in Accellera/IEEE standards. SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together experts from the SystemC user community and the Accellera Working Groups to advance SystemC standards. Date: 31 October 2019 (day after DVCon Europe 2019) Time: 9:30 - 18:00 CEST Location: Holiday Inn Munich City Centre, Hochstrasse 3, 81669 Munich, Germany Registration fees: \u20ac25 (Advance until 27 Sept) | \u20ac35 (on-site) plus 19%VAT","title":"SystemC Evolution Day 2019 "},{"location":"events/sced2019/#organization-team","text":"Oliver Bell, Intel (Chair) Martin Barnasconi, NXP Andrew Stevens, Infineon Ola Dahl, Ericsson Philipp A. Hartmann, Intel Volkan Esen, Infineon Ingo Feldner, Bosch Tran Nguyen, ARM Manfred Thanner, NXP Jerome Cornet, ST","title":"Organization Team:"},{"location":"events/sced2019/#agenda","text":"Time (CEST) Title Presenter(s) Affiliation(s) 8:30 - 9:00 Welcome coffee 9:00 - 9:30 Introduction, Brief SystemC WG Standardization Update Presentation Oliver Bell 1 Martin Barnasconi 2 1 Intel 2 Accellera 9:30 - 10:15 SystemC and Digital Twin: Good match or Not? Presentation Martin Barnasconi NXP 10:15 \u2013 10:45 Coffee break \u2013 hosted by Accellera 10:45 \u2013 12:30 Simulation, Kernel Technology, Tracing Pushing the Limits of Standard-Compliant Parallel SystemC Simulation Presentation Rainer D\u00f6mer University of California, Irvine Synchronizing simulators, and Save and Restore Presentation Mark Burton Greensocs Improving the Usability and Performance of Tracing in SystemC Presentation Rauf Salimi, Philipp Hartmann Intel 12:30 \u2013 13:45 Lunch break - courtesy of Accellera, Cadence, Mentor A Siemens Business, and Synopsys 13:45 \u2013 15:00 TLM, Interoperability, Metrics Methodology for defining bus specific Programmer\u2019s View extensions to TLM2.0 Presentation Umesh Sisodia, Prince Arora CircuitSutra Technologies Pvt Ltd Follow up on GP extension standard, Clock and Reset SC standard Presentation Joachim Geishauser NXP SystemC Modeling Metrics Presentation Ingo Feldner, Tim Kraus Bosch 15:00 \u2013 15:30 Coffee break \u2013 hosted by Accellera 15:30 \u2013 17:00 Model Creation, High Level Synthesis Re-envisioning CCI inspection Presentation Bill Bunton 1 , Philipp Hartmann 1 , Michael Lebert 2 , Ola Dahl 2 1 Intel 2 Ericsson Advanced assertion checking in SystemC High-Level Synthesis flows Presentation Bob Condon Intel 17:00 \u2013 17:30 Wrap-up & Closing","title":"Agenda"},{"location":"events/sced2019/#contact-us","text":"systemc-evolution-day@lists.accellera.org","title":"Contact us"},{"location":"events/sced2019/#special-thanks-to-the-systemc-evolution-day-event-sponsors","text":"","title":"Special thanks to the SystemC Evolution Day event sponsors:"},{"location":"events/sced2020/","text":"SystemC Evolution Day 2020 Workshop on the Evolution of SystemC Standards Thursday, October 29, 2020 Virtual Online Workshop The fifth SystemC Evolution Day was a full-day, technical workshop on the evolution of SystemC standards to advance the SystemC ecosystem. In several in-depth sessions, selected current and future standardization topics around SystemC will be discussed in order to accelerate their progress for inclusion in Accellera/IEEE standards. SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together experts from the SystemC user community and the Accellera Working Groups to advance SystemC standards. Date: 29 October 2020 (day after DVCon Europe 2020) Time: 8:30 - 19:30 CET Location: Virtual Online Workshop Organization Team: Ola Dahl, Ericsson (Chair) Martin Barnasconi, NXP Jerome Cornet, STMicroelectronics Christian Sauer, Cadence Mark Burton, GreenSocs Daniele Ludovici, Intel Agenda Time (CEST) Title Presenter(s) Affiliation(s) 8:30 - 9:00 Welcome and Introduction Presentation Ola Dahl Ericsson 9:00 - 10:00 A SystemC TLM 2.0 Extension for the Model Exchange of Off-Chip Communication Protocols Presentation G. Stazi, V. Di Valerio, S. Sinisi, A. Ulisse, S. Soffia Raytheon Technologies Research Center Italy 10:00 - 11:00 Multi core debugger integration in OSCI SystemC Presentation Peter de Jager Intel 11:00 \u2013 11:30 Update from Accellera Working Groups Presentation Martin Barnasconi Accellera 11:30 \u2013 12:00 Open Discussion 13:00 \u2013 15:00 Virtual Networking 16:00 - 17:00 Towards a Standardized Multi Language Verification Framework Presentation Warren Stapleton 1 , Bryan Sniderman 1 , Alex Chudnovsky 2 , Faris Khundakjie 3 , Martin Barnasconi 4 1 AMD, 2 Cadence, 3 Intel, 4 NXP 17:00 - 18:00 Temporal assertions in SystemC Presentation Mikhail Moiseev, Leonid Azarenkov, Ilya Klotchkov Intel 18:00 - 19:00 Matchlib: A New Open source Library to Enable Efficient Use of High Level Synthesis Presentation Stuart Swan Mentor, A Siemens Business 19:00 \u2013 19:30 Summary and Conclusion Discussion SystemC Evolution Day Goes Virtual by Ola Dahl Entering the digital conference era, the Accellera SystemC Evolution Day 2020 will follow the example set by DVCon Europe, and become a virtual event. This will make things different, of course, but it will also enable new possibilities. The overall intent remains: We want to gather the SystemC community, and we want interesting presentations and creative discussions and debates, advancing the standards. Our call for contributions closed on July 10, 2020. As stated in the call for contributions, we welcomed \u201ccontributions on ideas for additions and improvements to SystemC and its further standardization.\" For the choice of topic, you might want to relate to ongoing activities in Accellera working groups, covering the \u201cSystemC language, Transaction level Modeling (TLM), Configuration, Control & Inspection (CCI), Analog/Mixed Signal (AMS), High-level Synthesis (HLS), and Verification\u201d. We will post the full agenda soon - stay tuned! We are eager to hear about your insights from own projects, applications and studies, as well as continuations and follow-ups from previous System Evolution Days. Looking back at previous events (we had SystemC Evolution Days in 2016, 2017, 2018, and 2019), you might want to pick a topic that has been on the agenda before, or you might want to bring in fresh insights and new angles on SystemC. Regarding how the actual workshop will be run, we are working on that, together with the DVCon Europe Steering Committee \u2013 stay tuned, and more info will follow. For additional inspiration, you might want to have a look at topics from earlier years, as presented by tagcrowd \u2013 based on a personal (and clearly unscientific) summary from the presentation material: Contact us systemc-evolution-day@lists.accellera.org Special thanks to the SystemC Evolution Day event sponsors:","title":"SystemC Evolution Day 2020"},{"location":"events/sced2020/#systemc-evolution-day-2020","text":"Workshop on the Evolution of SystemC Standards Thursday, October 29, 2020 Virtual Online Workshop The fifth SystemC Evolution Day was a full-day, technical workshop on the evolution of SystemC standards to advance the SystemC ecosystem. In several in-depth sessions, selected current and future standardization topics around SystemC will be discussed in order to accelerate their progress for inclusion in Accellera/IEEE standards. SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together experts from the SystemC user community and the Accellera Working Groups to advance SystemC standards. Date: 29 October 2020 (day after DVCon Europe 2020) Time: 8:30 - 19:30 CET Location: Virtual Online Workshop","title":"SystemC Evolution Day 2020 "},{"location":"events/sced2020/#organization-team","text":"Ola Dahl, Ericsson (Chair) Martin Barnasconi, NXP Jerome Cornet, STMicroelectronics Christian Sauer, Cadence Mark Burton, GreenSocs Daniele Ludovici, Intel","title":"Organization Team:"},{"location":"events/sced2020/#agenda","text":"Time (CEST) Title Presenter(s) Affiliation(s) 8:30 - 9:00 Welcome and Introduction Presentation Ola Dahl Ericsson 9:00 - 10:00 A SystemC TLM 2.0 Extension for the Model Exchange of Off-Chip Communication Protocols Presentation G. Stazi, V. Di Valerio, S. Sinisi, A. Ulisse, S. Soffia Raytheon Technologies Research Center Italy 10:00 - 11:00 Multi core debugger integration in OSCI SystemC Presentation Peter de Jager Intel 11:00 \u2013 11:30 Update from Accellera Working Groups Presentation Martin Barnasconi Accellera 11:30 \u2013 12:00 Open Discussion 13:00 \u2013 15:00 Virtual Networking 16:00 - 17:00 Towards a Standardized Multi Language Verification Framework Presentation Warren Stapleton 1 , Bryan Sniderman 1 , Alex Chudnovsky 2 , Faris Khundakjie 3 , Martin Barnasconi 4 1 AMD, 2 Cadence, 3 Intel, 4 NXP 17:00 - 18:00 Temporal assertions in SystemC Presentation Mikhail Moiseev, Leonid Azarenkov, Ilya Klotchkov Intel 18:00 - 19:00 Matchlib: A New Open source Library to Enable Efficient Use of High Level Synthesis Presentation Stuart Swan Mentor, A Siemens Business 19:00 \u2013 19:30 Summary and Conclusion Discussion","title":"Agenda"},{"location":"events/sced2020/#systemc-evolution-day-goes-virtual","text":"by Ola Dahl Entering the digital conference era, the Accellera SystemC Evolution Day 2020 will follow the example set by DVCon Europe, and become a virtual event. This will make things different, of course, but it will also enable new possibilities. The overall intent remains: We want to gather the SystemC community, and we want interesting presentations and creative discussions and debates, advancing the standards. Our call for contributions closed on July 10, 2020. As stated in the call for contributions, we welcomed \u201ccontributions on ideas for additions and improvements to SystemC and its further standardization.\" For the choice of topic, you might want to relate to ongoing activities in Accellera working groups, covering the \u201cSystemC language, Transaction level Modeling (TLM), Configuration, Control & Inspection (CCI), Analog/Mixed Signal (AMS), High-level Synthesis (HLS), and Verification\u201d. We will post the full agenda soon - stay tuned! We are eager to hear about your insights from own projects, applications and studies, as well as continuations and follow-ups from previous System Evolution Days. Looking back at previous events (we had SystemC Evolution Days in 2016, 2017, 2018, and 2019), you might want to pick a topic that has been on the agenda before, or you might want to bring in fresh insights and new angles on SystemC. Regarding how the actual workshop will be run, we are working on that, together with the DVCon Europe Steering Committee \u2013 stay tuned, and more info will follow. For additional inspiration, you might want to have a look at topics from earlier years, as presented by tagcrowd \u2013 based on a personal (and clearly unscientific) summary from the presentation material:","title":"SystemC Evolution Day Goes Virtual"},{"location":"events/sced2020/#contact-us","text":"systemc-evolution-day@lists.accellera.org","title":"Contact us"},{"location":"events/sced2020/#special-thanks-to-the-systemc-evolution-day-event-sponsors","text":"","title":"Special thanks to the SystemC Evolution Day event sponsors:"},{"location":"events/sced2021/","text":"SystemC Evolution Day 2021 Workshop on the Evolution of SystemC Standards, held on 28 October 2021 The sixth SystemC Evolution Day is a full-day, technical workshop on the evolution of SystemC standards to advance the SystemC ecosystem. In several in-depth sessions, selected current and future standardization topics around SystemC will be discussed in order to accelerate their progress for inclusion in Accellera/IEEE standards. SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together experts from the SystemC user community and the Accellera Working Groups to advance SystemC standards. Event information Date: 28 October 2021 (day after DVCon Europe 2021) Time: 08:30 - 18:30 CEST Location: Online, Virtual Workshop Organization Team: Ola Dahl, Ericsson (Chair) Martin Barnasconi, NXP Jerome Cornet, STMicroelectronics Christian Sauer, Cadence Mark Burton, GreenSocs Peter de Jager, Intel Agenda Time (CEST) Title Author(s) Affiliation(s) 08:30 - 09:00 Welcome and Introduction Video | Presentation Ola Dahl Ericsson 09:00 - 10:00 How to Fork Threads in SystemC Just Like in SystemVerilog and Specman-e Video | Presentation Stefan Tiberiu Petre Independent Verification Consultant 10:00 - 11:00 Multi-core Debugger Integration and Suspend/Resume Video | Presentation Peter de Jager Intel Corporation 11:00 - 12:00 SystemC Community \u2013 GitHub, Forums, Websites Video | Presentation Martin Barnasconi 1 Mark Burton 2 1 Accellera 2 GreenSocs 12:00 - 12:30 Update from Accellera SystemC Working Groups Video | Presentation Martin Barnasconi Accellera 12:30 - 13:00 Q&A 13:00 - 16:00 Virtual Networking 16:00 - 17:00 SystemC in Hybrid Simulations Video | Presentation Mark Burton 1 Martin Barnasconi 2 1 GreenSocs 2 NXP 17:00 - 18:00 Formal Verification for SystemC/C++ Designs Video | Presentation Vlada Kalinic OneSpin, A Siemens Business 18:00 - 18:30 Summary and Concluding Discussion Video | Presentation Ola Dahl Ericsson Read more! View the presentations from SystemC Evolution Day 2020 Read the 2020 event summary by chair Ola Dahl View the presentations from SystemC Evolution Day 2019 View the presentations from SystemC Evolution Day 2018 Contact us systemc-evolution-day@lists.accellera.org Special thanks to the SystemC Evolution Day event sponsors:","title":"SystemC Evolution Day 2021"},{"location":"events/sced2021/#systemc-evolution-day-2021","text":"Workshop on the Evolution of SystemC Standards, held on 28 October 2021 The sixth SystemC Evolution Day is a full-day, technical workshop on the evolution of SystemC standards to advance the SystemC ecosystem. In several in-depth sessions, selected current and future standardization topics around SystemC will be discussed in order to accelerate their progress for inclusion in Accellera/IEEE standards. SystemC Evolution Day is intended as a lean, user-centric, hands-on forum bringing together experts from the SystemC user community and the Accellera Working Groups to advance SystemC standards.","title":"SystemC Evolution Day 2021 "},{"location":"events/sced2021/#event-information","text":"Date: 28 October 2021 (day after DVCon Europe 2021) Time: 08:30 - 18:30 CEST Location: Online, Virtual Workshop","title":"Event information"},{"location":"events/sced2021/#organization-team","text":"Ola Dahl, Ericsson (Chair) Martin Barnasconi, NXP Jerome Cornet, STMicroelectronics Christian Sauer, Cadence Mark Burton, GreenSocs Peter de Jager, Intel","title":"Organization Team:"},{"location":"events/sced2021/#agenda","text":"Time (CEST) Title Author(s) Affiliation(s) 08:30 - 09:00 Welcome and Introduction Video | Presentation Ola Dahl Ericsson 09:00 - 10:00 How to Fork Threads in SystemC Just Like in SystemVerilog and Specman-e Video | Presentation Stefan Tiberiu Petre Independent Verification Consultant 10:00 - 11:00 Multi-core Debugger Integration and Suspend/Resume Video | Presentation Peter de Jager Intel Corporation 11:00 - 12:00 SystemC Community \u2013 GitHub, Forums, Websites Video | Presentation Martin Barnasconi 1 Mark Burton 2 1 Accellera 2 GreenSocs 12:00 - 12:30 Update from Accellera SystemC Working Groups Video | Presentation Martin Barnasconi Accellera 12:30 - 13:00 Q&A 13:00 - 16:00 Virtual Networking 16:00 - 17:00 SystemC in Hybrid Simulations Video | Presentation Mark Burton 1 Martin Barnasconi 2 1 GreenSocs 2 NXP 17:00 - 18:00 Formal Verification for SystemC/C++ Designs Video | Presentation Vlada Kalinic OneSpin, A Siemens Business 18:00 - 18:30 Summary and Concluding Discussion Video | Presentation Ola Dahl Ericsson","title":"Agenda"},{"location":"events/sced2021/#read-more","text":"View the presentations from SystemC Evolution Day 2020 Read the 2020 event summary by chair Ola Dahl View the presentations from SystemC Evolution Day 2019 View the presentations from SystemC Evolution Day 2018","title":"Read more!"},{"location":"events/sced2021/#contact-us","text":"systemc-evolution-day@lists.accellera.org","title":"Contact us"},{"location":"events/sced2021/#special-thanks-to-the-systemc-evolution-day-event-sponsors","text":"","title":"Special thanks to the SystemC Evolution Day event sponsors:"},{"location":"events/scef202103/","text":"SystemC Evolution Fika - March 2021 The first SystemC Evolution Fika took place on 17 March 17 2021. Two presentations were given; one on SystemC and Python and one about the Intel SystemC Compiler. See the abstracts and slides below. You are all welcome to join the next SystemC Evolution Fika! If you have topics that you think should be included in upcoming fikas, please let us know at systemc-evolution-fika@lists.accellera.org. Event information Date: 17 March 2021 Time: 16:00 - 18:00 CET Location: Online event Organization Team Ola Dahl, Ericsson (Chair) Martin Barnasconi, NXP Jerome Cornet, STMicroelectronics Christian Sauer, Cadence Mark Burton, GreenSocs Peter de Jager, Intel Agenda Time (CEST) Title Presenter(s) Affiliation(s) 16:00 - 17:00 Python and SystemC Abstract | Presentation Rocco Jonack 1 Eyck Jentzsch 2 1 Arteris 2 MINRES Technologies 17:00 - 18:00 Intel Compiler for SystemC Abstract | Presentation Mikhail Moiseev Intel Presentation Abstracts Python and SystemC Presenters: Rocco Jonack, Arteris; Eyck Jentzsch, MINRES Technologies Scripting is commonly used in today's applications and EDA tools. For SystemC various proprietary and open source solutions are available. All of them impose various constraints on SystemC users and often restrict the visibility of C++ components to Python. We present a novel approach of integrating SystemC. It does not require any instrumentation or manual preparation and exposes all SystemC types and functions as well as components provided by other libraries, i.e. IP libraries (even in binary form). It allows calling Python from SystemC modules e.g. to implement scriptable components for verification purposes. The session will outline how this can be used to implement interactive and dynamic tools to assemble Virtual prototypes (VP) easily as well as control their simulation. This is especially useful in HW/SW unit testing and FW verification where the dynamic nature of Python allows to select various test cuts of the VP to ease the tasks. Intel Compiler for SystemC Presenter: Mikhail Moiseev, Intel Intel\u00ae Compiler for SystemC (ICSC) translates synthesizable SystemC design to synthesizable SystemVerilog design. ICSC supports SystemC synthesizable subset in method and thread processes and arbitrary C++ code in module constructors. The tool produces human-readable SystemVerilog for complex multi-module designs in tens of seconds. This tool is focused on improving productivity of design and verification engineers and leaves optimization work for an underlying logic synthesis tool. It performs design checks to detect non-synthesizable code and common coding mistakes. ICSC is based on LLVM/Clang frontend, that allows to support modern C++ standards. ICSC has a common library which includes collections of FIFOs, clock gate cells, zero-delay channels and others. ICSC supports SystemC immediate and temporal assertions translation into SystemVerilog Assertions (SVA). The Intel\u00ae Compiler for SystemC is available at https://github.com/intel/systemc-compiler The Very First SystemC Evolution Fika The first SystemC Evolution Fika was held on March 17, 2021. It was a virtual event, hosted by Accellera's Webex, with around 80 participants. We had two presentations on SystemC-related topics - Python and SystemC by Rocco Jonack and Eyck Jentzsch, and Intel Compiler for SystemC by Mikhail Moiseev. Using Python together with SystemC, it is possible to express simulator configuration, with model instantiations and model connections, in Python. This gives a flexible environment which can be combined with other Python tools, in areas such as computation or graphical visualization. The Python/SystemC combination presented at the Fika, which is available via Accellera's GitHub , can also be combined with the Minres SCC productivity library . The Intel Compiler for SystemC translates SystemC to synthesizable SystemVerilog. With a focus on improving productivity in design and verification, it supports modern variants of C++ and the SystemC Synthesizable Standard . It generates human-readable SystemVerilog code, and it can be built using CMake. It also supports more advanced verification features, such as assertions and temporal assertions, which are translated from SystemC (C++) to corresponding SystemVerilog assertions. The Intel Compiler for SystemC is available via Intel's GitHub . We would like to thank the speakers, and the participants, for this first Fika! We are planning the next one, and we are always open to suggestions for topics for upcoming Fikas. You can reach us on systemc-evolution-fika@lists.accellera.org Ola Dahl, on behalf of the SystemC Evolution Team If you have a contribution in this area, please let us know at systemc-evolution-fika@lists.accellera.org .","title":"SystemC Evolution Fika - March 2021"},{"location":"events/scef202103/#systemc-evolution-fika-march-2021","text":"The first SystemC Evolution Fika took place on 17 March 17 2021. Two presentations were given; one on SystemC and Python and one about the Intel SystemC Compiler. See the abstracts and slides below. You are all welcome to join the next SystemC Evolution Fika! If you have topics that you think should be included in upcoming fikas, please let us know at systemc-evolution-fika@lists.accellera.org.","title":"SystemC Evolution Fika - March 2021"},{"location":"events/scef202103/#event-information","text":"Date: 17 March 2021 Time: 16:00 - 18:00 CET Location: Online event","title":"Event information"},{"location":"events/scef202103/#organization-team","text":"Ola Dahl, Ericsson (Chair) Martin Barnasconi, NXP Jerome Cornet, STMicroelectronics Christian Sauer, Cadence Mark Burton, GreenSocs Peter de Jager, Intel","title":"Organization Team"},{"location":"events/scef202103/#agenda","text":"Time (CEST) Title Presenter(s) Affiliation(s) 16:00 - 17:00 Python and SystemC Abstract | Presentation Rocco Jonack 1 Eyck Jentzsch 2 1 Arteris 2 MINRES Technologies 17:00 - 18:00 Intel Compiler for SystemC Abstract | Presentation Mikhail Moiseev Intel","title":"Agenda"},{"location":"events/scef202103/#presentation-abstracts","text":"","title":"Presentation Abstracts"},{"location":"events/scef202103/#python-and-systemc","text":"Presenters: Rocco Jonack, Arteris; Eyck Jentzsch, MINRES Technologies Scripting is commonly used in today's applications and EDA tools. For SystemC various proprietary and open source solutions are available. All of them impose various constraints on SystemC users and often restrict the visibility of C++ components to Python. We present a novel approach of integrating SystemC. It does not require any instrumentation or manual preparation and exposes all SystemC types and functions as well as components provided by other libraries, i.e. IP libraries (even in binary form). It allows calling Python from SystemC modules e.g. to implement scriptable components for verification purposes. The session will outline how this can be used to implement interactive and dynamic tools to assemble Virtual prototypes (VP) easily as well as control their simulation. This is especially useful in HW/SW unit testing and FW verification where the dynamic nature of Python allows to select various test cuts of the VP to ease the tasks.","title":"Python and SystemC"},{"location":"events/scef202103/#intel-compiler-for-systemc","text":"Presenter: Mikhail Moiseev, Intel Intel\u00ae Compiler for SystemC (ICSC) translates synthesizable SystemC design to synthesizable SystemVerilog design. ICSC supports SystemC synthesizable subset in method and thread processes and arbitrary C++ code in module constructors. The tool produces human-readable SystemVerilog for complex multi-module designs in tens of seconds. This tool is focused on improving productivity of design and verification engineers and leaves optimization work for an underlying logic synthesis tool. It performs design checks to detect non-synthesizable code and common coding mistakes. ICSC is based on LLVM/Clang frontend, that allows to support modern C++ standards. ICSC has a common library which includes collections of FIFOs, clock gate cells, zero-delay channels and others. ICSC supports SystemC immediate and temporal assertions translation into SystemVerilog Assertions (SVA). The Intel\u00ae Compiler for SystemC is available at https://github.com/intel/systemc-compiler","title":"Intel Compiler for SystemC"},{"location":"events/scef202103/#the-very-first-systemc-evolution-fika","text":"The first SystemC Evolution Fika was held on March 17, 2021. It was a virtual event, hosted by Accellera's Webex, with around 80 participants. We had two presentations on SystemC-related topics - Python and SystemC by Rocco Jonack and Eyck Jentzsch, and Intel Compiler for SystemC by Mikhail Moiseev. Using Python together with SystemC, it is possible to express simulator configuration, with model instantiations and model connections, in Python. This gives a flexible environment which can be combined with other Python tools, in areas such as computation or graphical visualization. The Python/SystemC combination presented at the Fika, which is available via Accellera's GitHub , can also be combined with the Minres SCC productivity library . The Intel Compiler for SystemC translates SystemC to synthesizable SystemVerilog. With a focus on improving productivity in design and verification, it supports modern variants of C++ and the SystemC Synthesizable Standard . It generates human-readable SystemVerilog code, and it can be built using CMake. It also supports more advanced verification features, such as assertions and temporal assertions, which are translated from SystemC (C++) to corresponding SystemVerilog assertions. The Intel Compiler for SystemC is available via Intel's GitHub . We would like to thank the speakers, and the participants, for this first Fika! We are planning the next one, and we are always open to suggestions for topics for upcoming Fikas. You can reach us on systemc-evolution-fika@lists.accellera.org Ola Dahl, on behalf of the SystemC Evolution Team If you have a contribution in this area, please let us know at systemc-evolution-fika@lists.accellera.org .","title":"The Very First SystemC Evolution Fika "},{"location":"events/scef202106/","text":"SystemC Evolution Fika - June 2021 The second SystemC Evolution Fika took place on 30 June 2021 and was presented free of charge to the SystemC Community. The fika included a presentation on SystemC and QEMU and a panel discussion on SystemC modeling libraries. Event information Date: 30 June 2021 Time: 16:00 - 18:00 CET Location: Online event Organization Team Ola Dahl, Ericsson (Chair) Martin Barnasconi, NXP Jerome Cornet, STMicroelectronics Christian Sauer, Cadence Mark Burton, GreenSocs Peter de Jager, Intel Agenda Time (CEST) Title Presenter(s) Affiliation(s) 16:00 - 17:00 SystemC and QEMU Abstract | Video Mark Burton Greensocs 17:00 - 18:00 Panel: SystemC Modeling Libraries Abstract | Video Lukas J\u00fcnger 1 , Rocco Jonack 2 , Eyck Jentzsch 3 , Laurent Maillet-Contoz 4 1 Greensocs, 2 Arteris, 3 MINRES Technologies, 4 ST Microelectronics Presentation Abstracts SystemC and QEMU Presenter: Mark Burton, Greensocs Whats in the QBox? QEMU and SystemC has been a topic of conversation for some years, with good reason. QEMU is probably the best known \u2018de facto standard\u2019 virtualiser, while SystemC is \u201cthe standard language to build virtual platforms\u201d - both of them are \u201copen source\u201d - they should live together, right? Well, we\u2019re now on at least the 3rd generation of integrations between the two, and things are beginning to work quite well! QEMU is fast, really fast, and with the advent of MTTCG (Thanks to GreenSocs), it\u2019s multi-core and fast. It also covers a huge range of architectures and devices. We will talk about how QEMU works, and the possibilities for integration with SystemC; we\u2019ll touch on synchronisation (and how to make sure it works with all external simulators); and we\u2019ll also look at some use cases where QEMU itself is now able to \u2018give answers\u2019 that previously required much more detailed modelling. Panel: SystemC Modeling Libraries Panelists: Lukas J\u00fcnger, Greensocs Rocco Jonack, Arteris Eyck Jentzsch, MINRES Technologies Laurent Maillet-Contoz, STMicroelectronics A panel discussing libraries for modeling and simulation, with the goal to exchange ideas and look for commonalities that could be of interest as common shared libraries and/or future standardization work at Accellera. Topics include, but are not limited to: Utilities for simulators, like logging, tracing, debugging Tools and frameworks for simulator configuration, including model instantiations and model connections Class libraries for certain model components, model types and protocols Video Recording SystemC Evolution Fika - 30 June 2021 Contact us You are all welcome to join the next SystemC Evolution Fika! If you have topics that you think should be included in upcoming fikas, please let us know at systemc-evolution-fika@lists.accellera.org .","title":"SystemC Evolution Fika - June 2021"},{"location":"events/scef202106/#systemc-evolution-fika-june-2021","text":"The second SystemC Evolution Fika took place on 30 June 2021 and was presented free of charge to the SystemC Community. The fika included a presentation on SystemC and QEMU and a panel discussion on SystemC modeling libraries.","title":"SystemC Evolution Fika - June 2021"},{"location":"events/scef202106/#event-information","text":"Date: 30 June 2021 Time: 16:00 - 18:00 CET Location: Online event","title":"Event information"},{"location":"events/scef202106/#organization-team","text":"Ola Dahl, Ericsson (Chair) Martin Barnasconi, NXP Jerome Cornet, STMicroelectronics Christian Sauer, Cadence Mark Burton, GreenSocs Peter de Jager, Intel","title":"Organization Team"},{"location":"events/scef202106/#agenda","text":"Time (CEST) Title Presenter(s) Affiliation(s) 16:00 - 17:00 SystemC and QEMU Abstract | Video Mark Burton Greensocs 17:00 - 18:00 Panel: SystemC Modeling Libraries Abstract | Video Lukas J\u00fcnger 1 , Rocco Jonack 2 , Eyck Jentzsch 3 , Laurent Maillet-Contoz 4 1 Greensocs, 2 Arteris, 3 MINRES Technologies, 4 ST Microelectronics","title":"Agenda"},{"location":"events/scef202106/#presentation-abstracts","text":"","title":"Presentation Abstracts"},{"location":"events/scef202106/#systemc-and-qemu","text":"Presenter: Mark Burton, Greensocs Whats in the QBox? QEMU and SystemC has been a topic of conversation for some years, with good reason. QEMU is probably the best known \u2018de facto standard\u2019 virtualiser, while SystemC is \u201cthe standard language to build virtual platforms\u201d - both of them are \u201copen source\u201d - they should live together, right? Well, we\u2019re now on at least the 3rd generation of integrations between the two, and things are beginning to work quite well! QEMU is fast, really fast, and with the advent of MTTCG (Thanks to GreenSocs), it\u2019s multi-core and fast. It also covers a huge range of architectures and devices. We will talk about how QEMU works, and the possibilities for integration with SystemC; we\u2019ll touch on synchronisation (and how to make sure it works with all external simulators); and we\u2019ll also look at some use cases where QEMU itself is now able to \u2018give answers\u2019 that previously required much more detailed modelling.","title":"SystemC and QEMU"},{"location":"events/scef202106/#panel-systemc-modeling-libraries","text":"Panelists: Lukas J\u00fcnger, Greensocs Rocco Jonack, Arteris Eyck Jentzsch, MINRES Technologies Laurent Maillet-Contoz, STMicroelectronics A panel discussing libraries for modeling and simulation, with the goal to exchange ideas and look for commonalities that could be of interest as common shared libraries and/or future standardization work at Accellera. Topics include, but are not limited to: Utilities for simulators, like logging, tracing, debugging Tools and frameworks for simulator configuration, including model instantiations and model connections Class libraries for certain model components, model types and protocols","title":"Panel: SystemC Modeling Libraries"},{"location":"events/scef202106/#video-recording","text":"SystemC Evolution Fika - 30 June 2021","title":"Video Recording"},{"location":"events/scef202106/#contact-us","text":"You are all welcome to join the next SystemC Evolution Fika! If you have topics that you think should be included in upcoming fikas, please let us know at systemc-evolution-fika@lists.accellera.org .","title":"Contact us"},{"location":"events/scef202204/","text":"SystemC Evolution Fika - 7 April 2022 Workshop on the Evolution of SystemC Standards In 2022 we are continuing the SystemC Evolution by organizing a series of online workshops to discuss the latest SystemC developments and applications. We refer to these workshops as fikas , to honor the fika tradition of sharing a coffee, slowing down a bit, and talking about things that we care about. Event information Date: 7 April 2022 Time: 16:00 - 18:00 CET Location: Online, Virtual Workshop. Registration Registration is free of charge. Register here . Organization Team Ola Dahl, Ericsson (Chair) Martin Barnasconi, NXP Jerome Cornet, STMicroelectronics Christian Sauer, Cadence Mark Burton, GreenSocs Peter de Jager, Intel Agenda Main theme of the event: Parallelization of SystemC simulations Time (CEST) Title Presenter(s) Affiliation(s) 16:00 - 16:10 Introduction Ola Dahl Ericsson, Stockholm, Sweden 16:10 - 16:30 sc-during: Parallel Programming on Top of SystemC Matthieu Moy Laboratoire d\u2019Informatique du Parall\u00e9lisme (LIP), Lyon, France 16:30 - 16:50 Ensuring reproducible parallel LT TLM models simulation with SCale SystemC kernel Tanguy Sassolas CEA - LIST, Gif-sur-Yvette, France 16:50 - 17:10 The Intel Simics Simulator and SystemC and Threading Jakob Engblom Intel, Stockholm, Sweden 17:10 - 17:30 RISC: A Compiler for Parallel SystemC with Maximum Standard Compliance Rainer D\u00f6mer University of California, Irvine, CA, USA 17:30 - 18:00 Discussion All participants. Moderator: Ola Dahl Contact us systemc-evolution-fika@lists.accellera.org","title":"SystemC Evolution Fika - 7 April 2022"},{"location":"events/scef202204/#systemc-evolution-fika-7-april-2022","text":"","title":"SystemC Evolution Fika - 7 April 2022"},{"location":"events/scef202204/#workshop-on-the-evolution-of-systemc-standards","text":"In 2022 we are continuing the SystemC Evolution by organizing a series of online workshops to discuss the latest SystemC developments and applications. We refer to these workshops as fikas , to honor the fika tradition of sharing a coffee, slowing down a bit, and talking about things that we care about.","title":"Workshop on the Evolution of SystemC Standards"},{"location":"events/scef202204/#event-information","text":"Date: 7 April 2022 Time: 16:00 - 18:00 CET Location: Online, Virtual Workshop.","title":"Event information"},{"location":"events/scef202204/#registration","text":"Registration is free of charge. Register here .","title":"Registration"},{"location":"events/scef202204/#organization-team","text":"Ola Dahl, Ericsson (Chair) Martin Barnasconi, NXP Jerome Cornet, STMicroelectronics Christian Sauer, Cadence Mark Burton, GreenSocs Peter de Jager, Intel","title":"Organization Team"},{"location":"events/scef202204/#agenda","text":"","title":"Agenda"},{"location":"events/scef202204/#main-theme-of-the-event-parallelization-of-systemc-simulations","text":"Time (CEST) Title Presenter(s) Affiliation(s) 16:00 - 16:10 Introduction Ola Dahl Ericsson, Stockholm, Sweden 16:10 - 16:30 sc-during: Parallel Programming on Top of SystemC Matthieu Moy Laboratoire d\u2019Informatique du Parall\u00e9lisme (LIP), Lyon, France 16:30 - 16:50 Ensuring reproducible parallel LT TLM models simulation with SCale SystemC kernel Tanguy Sassolas CEA - LIST, Gif-sur-Yvette, France 16:50 - 17:10 The Intel Simics Simulator and SystemC and Threading Jakob Engblom Intel, Stockholm, Sweden 17:10 - 17:30 RISC: A Compiler for Parallel SystemC with Maximum Standard Compliance Rainer D\u00f6mer University of California, Irvine, CA, USA 17:30 - 18:00 Discussion All participants. Moderator: Ola Dahl","title":"Main theme of the event: Parallelization of SystemC simulations"},{"location":"events/scef202204/#contact-us","text":"systemc-evolution-fika@lists.accellera.org","title":"Contact us"},{"location":"events/scevents/","text":"SystemC Evolution Events The next Fika will take place at 7 April 2022 as online/virtual event. Visit this page for more information! In addition to our SystemC Evolution Day events, we are also continuing the SystemC Evolution with smaller, regular, online workshops. We refer to these workshops as fikas , to honor the fika tradition of sharing a coffee, slowing down a bit, and talking about things that we care about. These virtual events are free of charge. If you have topics that you think should be included in upcoming fikas, please let us know at systemc-evolution-fika@lists.accellera.org . See the past SystemC Evolution Fikas June 2021 March 2021 See the past SystemC Evolution Day Events SystemC Evolution Day 2021 SystemC Evolution Day 2020 SystemC Evolution Day 2019 SystemC Evolution Day 2018 SystemC Evolution Day 2017 SystemC Evolution Day 2016 Contact us systemc-evolution-fika@lists.accellera.org systemc-evolution-day@lists.accellera.org","title":"SystemC Evolution Events"},{"location":"events/scevents/#systemc-evolution-events","text":"The next Fika will take place at 7 April 2022 as online/virtual event. Visit this page for more information! In addition to our SystemC Evolution Day events, we are also continuing the SystemC Evolution with smaller, regular, online workshops. We refer to these workshops as fikas , to honor the fika tradition of sharing a coffee, slowing down a bit, and talking about things that we care about. These virtual events are free of charge. If you have topics that you think should be included in upcoming fikas, please let us know at systemc-evolution-fika@lists.accellera.org .","title":"SystemC Evolution Events"},{"location":"events/scevents/#see-the-past-systemc-evolution-fikas","text":"June 2021 March 2021","title":"See the past SystemC Evolution Fikas"},{"location":"events/scevents/#see-the-past-systemc-evolution-day-events","text":"SystemC Evolution Day 2021 SystemC Evolution Day 2020 SystemC Evolution Day 2019 SystemC Evolution Day 2018 SystemC Evolution Day 2017 SystemC Evolution Day 2016","title":"See the past SystemC Evolution Day Events"},{"location":"events/scevents/#contact-us","text":"systemc-evolution-fika@lists.accellera.org systemc-evolution-day@lists.accellera.org","title":"Contact us"},{"location":"overview/systemc-ams/","text":"SystemC Analog/Mixed-Signal Extensions The SystemC AMS standard ( IEEE Std. 1666.1-2016 ) introduces system-level design and modeling of embedded Analog/Mixed-Signal (AMS) systems. The SystemC AMS extensions define a uniform and standardized modeling approach at higher levels of abstraction, that can be used in combination with digital and SystemC-centric design methods, supporting a design refinement methodology for functional modeling, architecture exploration, and virtual prototyping of embedded analog/mixed-signal systems and applications. Why SystemC AMS? The SystemC AMS standard, ratified as IEEE Std. 1666.1-2016 , fulfills the need of the electronics industry to have a standardized system-level modeling language for mixed-signal applications based on SystemC and C++. The SystemC AMS standard defines the execution semantics and language constructs for system-level design and modeling of embedded analog/mixed-signal systems at higher levels of abstraction, focusing on modeling accuracy, fidelity and simulation speed. What is the difference between SystemC AMS and other HDL languages? The SystemC AMS extensions focus on the system-level (ESL) and architecture modeling aspects for mixed-signal applications, such as communcation, RF, automotive and sensor applications. By having AMS extensions for SystemC, users can now create mixed-signal virtual prototypes to make an executable description of the entire system in a C++ based manner, enabling a seamless integration of HW/SW architectures in SystemC, TLM, embedded software in C, and analog or contiuous-time functionality modeled in SystemC AMS. For abstract mixed-signal modeling, SystemC AMS offers the efficient Timed Data Flow model of computation to describe continuous signals in a discrete-time manner. The use of data flow semantics make the simulation much faster than traditional real-number-modeling approaches which use the inefficient discrete-event (digital) simulator, such as Verilog-AMS wreal or SystemVerilog real nettypess. Timed Data Flow simulation in SystemC AMS applies smart temporal abstraction techniques which reduce the simulation overhead, resulting in a significant speed-up, which is essential for virtual prototyping. This technique is comparable with TLM, but is now introduced for AMS signals. Is there a reference implementation available for SystemC AMS? A SystemC AMS proof-of-concept implementation is available under Apache 2.0 license, offered by COSEDA Technologies GmbH. It contains a class library in C++, and therefore can be compiled against a SystemC IEEE Std 1666-2011 compatible simulator. In addition, commercial simulation environments are available supporting SystemC and SystemC AMS, offereing much more capabilities compared to the reference implementations. For example, commercial tooling supprt enhanced design automation for system-level design, offer modeling libraries and enhanced tracing and debug capabilities. Please contact your local EDA vendor representative whether SystemC AMS is supported. How can I learn to use SystemC AMS? It is recommended is to start reading the SystemC AMS user's guide, which can be downloaded here . The user's guide explains all fundamentals of the SystemC AMS language and how to use the extensive set of features for AMS behavioral modeling at the system level. The application examples from the SystemC AMS user's guide can be found here . Is SystemC AMS an international standard? Yes. SystemC AMS has been transferred to IEEE, resulting in the release of IEEE Std 1666.1-2016. Thanks to Accellera sponsorship, the IEEE standard is made available under the IEEE Get Program free of charge. You can download the IEEE Std 1666.1-2016 here .","title":"SystemC AMS"},{"location":"overview/systemc-ams/#systemc-analogmixed-signal-extensions","text":"The SystemC AMS standard ( IEEE Std. 1666.1-2016 ) introduces system-level design and modeling of embedded Analog/Mixed-Signal (AMS) systems. The SystemC AMS extensions define a uniform and standardized modeling approach at higher levels of abstraction, that can be used in combination with digital and SystemC-centric design methods, supporting a design refinement methodology for functional modeling, architecture exploration, and virtual prototyping of embedded analog/mixed-signal systems and applications.","title":"SystemC Analog/Mixed-Signal Extensions"},{"location":"overview/systemc-ams/#why-systemc-ams","text":"The SystemC AMS standard, ratified as IEEE Std. 1666.1-2016 , fulfills the need of the electronics industry to have a standardized system-level modeling language for mixed-signal applications based on SystemC and C++. The SystemC AMS standard defines the execution semantics and language constructs for system-level design and modeling of embedded analog/mixed-signal systems at higher levels of abstraction, focusing on modeling accuracy, fidelity and simulation speed.","title":"Why SystemC AMS?"},{"location":"overview/systemc-ams/#what-is-the-difference-between-systemc-ams-and-other-hdl-languages","text":"The SystemC AMS extensions focus on the system-level (ESL) and architecture modeling aspects for mixed-signal applications, such as communcation, RF, automotive and sensor applications. By having AMS extensions for SystemC, users can now create mixed-signal virtual prototypes to make an executable description of the entire system in a C++ based manner, enabling a seamless integration of HW/SW architectures in SystemC, TLM, embedded software in C, and analog or contiuous-time functionality modeled in SystemC AMS. For abstract mixed-signal modeling, SystemC AMS offers the efficient Timed Data Flow model of computation to describe continuous signals in a discrete-time manner. The use of data flow semantics make the simulation much faster than traditional real-number-modeling approaches which use the inefficient discrete-event (digital) simulator, such as Verilog-AMS wreal or SystemVerilog real nettypess. Timed Data Flow simulation in SystemC AMS applies smart temporal abstraction techniques which reduce the simulation overhead, resulting in a significant speed-up, which is essential for virtual prototyping. This technique is comparable with TLM, but is now introduced for AMS signals.","title":"What is the difference between SystemC AMS and other HDL languages?"},{"location":"overview/systemc-ams/#is-there-a-reference-implementation-available-for-systemc-ams","text":"A SystemC AMS proof-of-concept implementation is available under Apache 2.0 license, offered by COSEDA Technologies GmbH. It contains a class library in C++, and therefore can be compiled against a SystemC IEEE Std 1666-2011 compatible simulator. In addition, commercial simulation environments are available supporting SystemC and SystemC AMS, offereing much more capabilities compared to the reference implementations. For example, commercial tooling supprt enhanced design automation for system-level design, offer modeling libraries and enhanced tracing and debug capabilities. Please contact your local EDA vendor representative whether SystemC AMS is supported.","title":"Is there a reference implementation available for SystemC AMS?"},{"location":"overview/systemc-ams/#how-can-i-learn-to-use-systemc-ams","text":"It is recommended is to start reading the SystemC AMS user's guide, which can be downloaded here . The user's guide explains all fundamentals of the SystemC AMS language and how to use the extensive set of features for AMS behavioral modeling at the system level. The application examples from the SystemC AMS user's guide can be found here .","title":"How can I learn to use SystemC AMS?"},{"location":"overview/systemc-ams/#is-systemc-ams-an-international-standard","text":"Yes. SystemC AMS has been transferred to IEEE, resulting in the release of IEEE Std 1666.1-2016. Thanks to Accellera sponsorship, the IEEE standard is made available under the IEEE Get Program free of charge. You can download the IEEE Std 1666.1-2016 here .","title":"Is SystemC AMS an international standard?"},{"location":"overview/systemc-cci/","text":"SystemC Configuration, Control and Inspection (CCI) The SystemC Configuration, Control and Inspection (CCI) standard enables greater interoperability of SystemC models within the SystemC ecosystem. It allows tools and models to work together to provide valuable user-level capabilities. The first phase of this standard addresses model configuration. The roadmap includes checkpointing and register introspection. The SystemC CCI Working Group addressed several key concerns while defining the CCI 1.0 standard. Of critical importance is the ability to interact with tools for which a portable value representation has been provided, along with information about configuration parameters, including a description and flexible metadata. Among the fundamental features in the standard are avoiding name clashes with elements of the SystemC object hierarchy, looking up and accessing configuration parameters, restricting access to parameters, preloading configuration settings, callbacks for parameter creation/destruction as well as value access, traceability of parameter value updates, and support for user-defined parameter value types Resources Download SystemC CCI 1.0 Video tutorial: SystemC Design and Verification - Solidifying the Abstraction Above RTL delivered at DVCon U.S. 2017. Part 2 of this video tutorial delves into the CCI configuration standard. CCI Working Group Update delivered as part of the \"Deploying SystemC for Complex System Prototyping and Validation\" tutorial at DVCon 2013","title":"SystemC CCI"},{"location":"overview/systemc-cci/#systemc-configuration-control-and-inspection-cci","text":"The SystemC Configuration, Control and Inspection (CCI) standard enables greater interoperability of SystemC models within the SystemC ecosystem. It allows tools and models to work together to provide valuable user-level capabilities. The first phase of this standard addresses model configuration. The roadmap includes checkpointing and register introspection. The SystemC CCI Working Group addressed several key concerns while defining the CCI 1.0 standard. Of critical importance is the ability to interact with tools for which a portable value representation has been provided, along with information about configuration parameters, including a description and flexible metadata. Among the fundamental features in the standard are avoiding name clashes with elements of the SystemC object hierarchy, looking up and accessing configuration parameters, restricting access to parameters, preloading configuration settings, callbacks for parameter creation/destruction as well as value access, traceability of parameter value updates, and support for user-defined parameter value types","title":"SystemC Configuration, Control and Inspection (CCI)"},{"location":"overview/systemc-cci/#resources","text":"Download SystemC CCI 1.0 Video tutorial: SystemC Design and Verification - Solidifying the Abstraction Above RTL delivered at DVCon U.S. 2017. Part 2 of this video tutorial delves into the CCI configuration standard. CCI Working Group Update delivered as part of the \"Deploying SystemC for Complex System Prototyping and Validation\" tutorial at DVCon 2013","title":"Resources"},{"location":"overview/systemc-verification/","text":"SystemC for Verification Beyond SystemC\u2019s built-in capabilities for system-level design and modeling, verification extensions are prodived to create a stable verification infrastructure supporting verification at a higher level of abstraction, compatible with industry recognized methodologies such as the Universal Verification Methodology (UVM). As verification needs in SystemC evolve and communication with other languages is more and more frequent, additions to the existing capabilities are required. For example, these additions will also focus on coverage analysis and temporal assertion checking mechanisms and their interfacing and/or integration into the SystemC language. Standardizing these additions is crucial to allow seamless migration of models from the environment of one tool supplier to another. This integration process also includes the analysis and evaluation of interfaces to existing Accellera verification approaches like UVM and their seamless integration into a SystemC-based verification process. SystemC Verification Library (SCV) The SystemC Verification (SCV) library provides a common set of APIs that are used as a basis to verification activities with SystemC, such as generation of values under constraints, transaction recording, etc. These APIs are implemented in all major SystemC simulators available on the market. The SystemC Verification Library 2.0.1 was released in December 2017. This release contains an implementation of the verification extensions for Accellera SystemC 2.3.2 and is compatible with IEEE 1666-2011. Examples and support for recent compilers is also included. The document can be accessed here . NOTE: There is no active development of the SCV library, the implementation is in maintenance mode. UVM in SystemC (UVM-SystemC) The UVM-SystemC library provides an implementation of the Universal Verification Methodology (UVM) in SystemC. The UVM-SystemC class library enables the development of scalable and reusable verification collateral for system-level verification and testing. The aim of UVM-SystemC is to be API compatible with UVM in SystemVerilog, to faciliate seamless integration and exchange of Verification IP (VIP) between system-level and IP-level test benches. Constrained Randomization library (CRAVE) To introduce constrained randomization features, the external CRAVE library can be used in combination with UVM-SystemC. The syntax of CRAVE has been designed to naturally fit with C++ and SystemC. The CRAVE library includes modern BDD-based and SAT/SMT-based solvers. Functional Coverage library (FC4SC) To enable coverage-driven verification, the functional coverage library FC4SC can be used. FC4SC offers declaration of covergroups, bins, coverpoints to enable type- and instance-based functional converage. The FC4SC library will store the coverage results in the Unified Coverage Interoperability Standard (UCIS) format, enabling seamless inclusion in various EDA solutions available in the market. Resources SystemC Verification Library (SCV) 2.0.1 UVM-SystemC Library 1.0beta30 CRAVE FC4SC","title":"SystemC Verification"},{"location":"overview/systemc-verification/#systemc-for-verification","text":"Beyond SystemC\u2019s built-in capabilities for system-level design and modeling, verification extensions are prodived to create a stable verification infrastructure supporting verification at a higher level of abstraction, compatible with industry recognized methodologies such as the Universal Verification Methodology (UVM). As verification needs in SystemC evolve and communication with other languages is more and more frequent, additions to the existing capabilities are required. For example, these additions will also focus on coverage analysis and temporal assertion checking mechanisms and their interfacing and/or integration into the SystemC language. Standardizing these additions is crucial to allow seamless migration of models from the environment of one tool supplier to another. This integration process also includes the analysis and evaluation of interfaces to existing Accellera verification approaches like UVM and their seamless integration into a SystemC-based verification process.","title":"SystemC for Verification"},{"location":"overview/systemc-verification/#systemc-verification-library-scv","text":"The SystemC Verification (SCV) library provides a common set of APIs that are used as a basis to verification activities with SystemC, such as generation of values under constraints, transaction recording, etc. These APIs are implemented in all major SystemC simulators available on the market. The SystemC Verification Library 2.0.1 was released in December 2017. This release contains an implementation of the verification extensions for Accellera SystemC 2.3.2 and is compatible with IEEE 1666-2011. Examples and support for recent compilers is also included. The document can be accessed here . NOTE: There is no active development of the SCV library, the implementation is in maintenance mode.","title":"SystemC Verification Library (SCV)"},{"location":"overview/systemc-verification/#uvm-in-systemc-uvm-systemc","text":"The UVM-SystemC library provides an implementation of the Universal Verification Methodology (UVM) in SystemC. The UVM-SystemC class library enables the development of scalable and reusable verification collateral for system-level verification and testing. The aim of UVM-SystemC is to be API compatible with UVM in SystemVerilog, to faciliate seamless integration and exchange of Verification IP (VIP) between system-level and IP-level test benches.","title":"UVM in SystemC (UVM-SystemC)"},{"location":"overview/systemc-verification/#constrained-randomization-library-crave","text":"To introduce constrained randomization features, the external CRAVE library can be used in combination with UVM-SystemC. The syntax of CRAVE has been designed to naturally fit with C++ and SystemC. The CRAVE library includes modern BDD-based and SAT/SMT-based solvers.","title":"Constrained Randomization library (CRAVE)"},{"location":"overview/systemc-verification/#functional-coverage-library-fc4sc","text":"To enable coverage-driven verification, the functional coverage library FC4SC can be used. FC4SC offers declaration of covergroups, bins, coverpoints to enable type- and instance-based functional converage. The FC4SC library will store the coverage results in the Unified Coverage Interoperability Standard (UCIS) format, enabling seamless inclusion in various EDA solutions available in the market.","title":"Functional Coverage library (FC4SC)"},{"location":"overview/systemc-verification/#resources","text":"SystemC Verification Library (SCV) 2.0.1 UVM-SystemC Library 1.0beta30 CRAVE FC4SC","title":"Resources"},{"location":"overview/systemc/","text":"SystemC The language for System-level design, modeling and verification SystemC\u2122 addresses the need for a system design and verification language that spans hardware and software. It is a language built in standard C++ by extending the language with the use of class libraries. The language is particularly suited to model system's partitioning, to evaluate and verify the assignment of blocks to either hardware or software implementations, and to architect and measure the interactions between and among functional blocks. Leading companies in the intellectual property (IP), electronic design automation (EDA), semiconductor, electronic systems, and embedded software industries currently use SystemC for architectural exploration, to deliver high-performance hardware blocks at various levels of abstraction and to develop virtual platforms for hardware/software co-design. SystemC has been standardized by the Open SystemC Initiative (OSCI) and Accellera Systems Initiative and ratified as IEEE Std. 1666\u2122-2011 . Why SystemC? An SoC is literally a system on a chip, consisting of both silicon and embedded software. Its design involves complex algorithm and architecture development and analysis similar to that performed in system design \u2013 a trade-off process that determines critical metrics, such as SOC performance, functionality, and power consumption. Consequently, design tools must deliver orders-of-magnitude improvement in productivity at both architectural and implementation (RT and physical) levels. Moreover, tools must support a methodology that enables the early development of embedded application and system software, long before the availability of the RTL design or silicon prototype. Failure to achieve the requisite improvements in design productivity would result in missed market windows, and exploding design costs. SystemC is a single, unified design and verification language that expresses architectural and other system-level attributes in the form of open-source C++ classes. It enables design and verification at the system level, independent of any detailed hardware and software implementation, as well as enabling co-verification with RTL design. This higher level of abstraction enables considerably faster, more productive architectural trade-off analysis, design, and redesign than is possible at the more detailed RT level. Furthermore, verification of system architecture and other system-level attributes is orders of magnitude faster than that at the pin-accurate, timing-accurate RT level. The SystemC community consists of a large and growing number of system design companies, semiconductor companies, intellectual property providers, and EDA tool vendors who have joined together to support and promote the standard. SystemC Transaction Level Modeling (TLM) The Transaction Level Modeling standard defines interfaces for SystemC, providing an essential framework for model exchange within companies and across the IP supply chain for architecture analysis, software development and performance analysis, and hardware verification. It explicitly addresses virtual prototyping in which SystemC models can easily be exchanged and arranged within a system, enabling the optimal reuse of models and modeling effort across different use cases. SystemC Analog/Mixed-Signal (AMS) The SystemC AMS standard defined in IEEE Std. 1666.1-2016 introduces system-level design and modeling of embedded Analog/Mixed-Signal (AMS) systems. SystemC AMS provides unique capabilities for the design and modeling of embedded analog/mixed-signal applications at higher levels of design abstraction. The SystemC AMS extensions define a uniform and standardized modeling approach that can be used in combination with digitally-oriented ESL design methods, supporting a design refinement methodology for functional modeling, architecture exploration, and virtual prototyping of embedded analog/mixed-signal systems. More information about SystemC AMS SystemC Configuration, Control and Inspection (CCI) The goal of Configuration, Control and Inspection (CCI) is to improve efficiency and ROI for model creators and tool providers. They CCI standards will allow suppliers to instrument models so that a rich user experience is enabled, and they will allow industry tools to leverage this instrumentation to provide powerful debug and analysis capabilities. The CCI working group is currently defining standards for the exchange of information between SystemC models and tools. More information about SystemC CCI SystemC Verification (UVM-SystemC, SCV) The UVM-SystemC library provides an implementation of the Universal Verification Methodology (UVM) in SystemC. The UVM-SystemC class library enables the development of scalable and reusable verification collateral for system-level verification and testing. The SystemC Verification (SCV) library provides a common set of APIs that are used as a basis to verification activities with SystemC (generation of values under constraints, transaction recording, etc.). These APIs are implemented in all major SystemC simulators available on the market. More information about SystemC Verification","title":"SystemC"},{"location":"overview/systemc/#systemc","text":"The language for System-level design, modeling and verification SystemC\u2122 addresses the need for a system design and verification language that spans hardware and software. It is a language built in standard C++ by extending the language with the use of class libraries. The language is particularly suited to model system's partitioning, to evaluate and verify the assignment of blocks to either hardware or software implementations, and to architect and measure the interactions between and among functional blocks. Leading companies in the intellectual property (IP), electronic design automation (EDA), semiconductor, electronic systems, and embedded software industries currently use SystemC for architectural exploration, to deliver high-performance hardware blocks at various levels of abstraction and to develop virtual platforms for hardware/software co-design. SystemC has been standardized by the Open SystemC Initiative (OSCI) and Accellera Systems Initiative and ratified as IEEE Std. 1666\u2122-2011 .","title":"SystemC"},{"location":"overview/systemc/#why-systemc","text":"An SoC is literally a system on a chip, consisting of both silicon and embedded software. Its design involves complex algorithm and architecture development and analysis similar to that performed in system design \u2013 a trade-off process that determines critical metrics, such as SOC performance, functionality, and power consumption. Consequently, design tools must deliver orders-of-magnitude improvement in productivity at both architectural and implementation (RT and physical) levels. Moreover, tools must support a methodology that enables the early development of embedded application and system software, long before the availability of the RTL design or silicon prototype. Failure to achieve the requisite improvements in design productivity would result in missed market windows, and exploding design costs. SystemC is a single, unified design and verification language that expresses architectural and other system-level attributes in the form of open-source C++ classes. It enables design and verification at the system level, independent of any detailed hardware and software implementation, as well as enabling co-verification with RTL design. This higher level of abstraction enables considerably faster, more productive architectural trade-off analysis, design, and redesign than is possible at the more detailed RT level. Furthermore, verification of system architecture and other system-level attributes is orders of magnitude faster than that at the pin-accurate, timing-accurate RT level. The SystemC community consists of a large and growing number of system design companies, semiconductor companies, intellectual property providers, and EDA tool vendors who have joined together to support and promote the standard.","title":"Why SystemC?"},{"location":"overview/systemc/#systemc-transaction-level-modeling-tlm","text":"The Transaction Level Modeling standard defines interfaces for SystemC, providing an essential framework for model exchange within companies and across the IP supply chain for architecture analysis, software development and performance analysis, and hardware verification. It explicitly addresses virtual prototyping in which SystemC models can easily be exchanged and arranged within a system, enabling the optimal reuse of models and modeling effort across different use cases.","title":"SystemC Transaction Level Modeling (TLM)"},{"location":"overview/systemc/#systemc-analogmixed-signal-ams","text":"The SystemC AMS standard defined in IEEE Std. 1666.1-2016 introduces system-level design and modeling of embedded Analog/Mixed-Signal (AMS) systems. SystemC AMS provides unique capabilities for the design and modeling of embedded analog/mixed-signal applications at higher levels of design abstraction. The SystemC AMS extensions define a uniform and standardized modeling approach that can be used in combination with digitally-oriented ESL design methods, supporting a design refinement methodology for functional modeling, architecture exploration, and virtual prototyping of embedded analog/mixed-signal systems. More information about SystemC AMS","title":"SystemC Analog/Mixed-Signal (AMS)"},{"location":"overview/systemc/#systemc-configuration-control-and-inspection-cci","text":"The goal of Configuration, Control and Inspection (CCI) is to improve efficiency and ROI for model creators and tool providers. They CCI standards will allow suppliers to instrument models so that a rich user experience is enabled, and they will allow industry tools to leverage this instrumentation to provide powerful debug and analysis capabilities. The CCI working group is currently defining standards for the exchange of information between SystemC models and tools. More information about SystemC CCI","title":"SystemC Configuration, Control and Inspection (CCI)"},{"location":"overview/systemc/#systemc-verification-uvm-systemc-scv","text":"The UVM-SystemC library provides an implementation of the Universal Verification Methodology (UVM) in SystemC. The UVM-SystemC class library enables the development of scalable and reusable verification collateral for system-level verification and testing. The SystemC Verification (SCV) library provides a common set of APIs that are used as a basis to verification activities with SystemC (generation of values under constraints, transaction recording, etc.). These APIs are implemented in all major SystemC simulators available on the market. More information about SystemC Verification","title":"SystemC Verification (UVM-SystemC, SCV)"},{"location":"resources/books/","text":"SystemC Books Enhanced Virtual Prototyping Featuring RISC-V Case Studies Authors: Vladimir Herdt, Daniel Gro\u00dfe, Rolf Drechsler Published: 2021 Publisher: Springer ISBN: 978-3-030-54828-5 (eBook), 978-3-030-54830-8 (Softcover Book), 978-3-030-54827-8 (Hardcover Book) More info Automated Analysis of Virtual Prototypes at the Electronic System Level Design Understanding and Applications Authors: Mehran Goli, Rolf Drechsler Published: 2020 Publisher: Springer ISBN: 978-3-030-44282-8 (eBook), 978-3-030-44284-2 (Softcover Book), 978-3-030-44281-1 (Hardcover Book) More info Complete Symbolic Simulation of SystemC Models Efficient Formal Verification of Finite Non-Terminating Programs Author: Vladimir Herdt Published: 2016 Publisher: Springer ISBN: 978-3-658-12680-3 (eBook), 978-3-658-12679-7 (Softcover Book) More info SystemC From Ground Up (2nd Edition) Authors: David Black, Jack Donovan, Bill Bunton, Anna Keist Published: 2009 Publisher: Springer ISBN: 978-0-387-69958-5 (eBook), 978-1-4899-8266-7 (Softcover Book), 978-0-387-69957-8 (Hardcover Book) More info Exercises Transaction Level Modeling with SystemC TLM Concepts and Applications for Embedded Systems Author: Frank Ghenassia Published: 2005 Publisher: Springer ISBN: 978-0-387-26233-8 (eBook), 978-1-4419-3875-6 (Softcover Book), 978-0-387-26232-1 (Hardcover Book) More info SystemC Methodologies and Applications Authors: Wolfgang M\u00fcller, Wolfgang Rosenstiel, J\u00fcrgen Ruf Published: 2003 Publisher: Springer ISBN: 978-0-306-48735-4 (eBook), 978-1-4419-5361-2 (Softcover Book), 978-1-4020-7479-0 (Hardcover Book) More info System Design with SystemC Authors: Thorsten Gr\u00f6tker, Grant Martin, Stan Liao, Stuart Swan Published: 2002 Publisher: Springer ISBN: 978-0-306-47652-5 (eBook), 978-1-4419-5285-1 (Softcover Book), 978-1-4020-7072-3 (Hardcover Book) More info","title":"Books"},{"location":"resources/books/#systemc-books","text":"","title":"SystemC Books"},{"location":"resources/education/","text":"SystemC Education This page gives an overview of the available education and university programs teaching SystemC. Please let us know if a universiry or institute is missing or needs update. University Country Department Lectures Grenoble Alpes University France Grenoble INP Ensimag Transaction Level Modeling in SystemC Johannes Kepler University Linz Austria Institute for Complex Systems (ICS) Virtual Prototyping/SystemC RWTH Aachen University Germany Faculty of Electrical Engineering and Information Technology Computer Science 3 Sorbonne University France LIP6 / CIAN - Analog and Digital Integrated Circuit Texas A&M University USA Electrical & Computer Engineering Advanced Digital System Design Technical University Chemnitz Germany Faculty Electrical Engineering and Information Technology / Circuit and System Design Design of Digital Systems Technical University Delft Netherlands Microelectronics / Circuits and Systems Group VLSI Systems on Chip Technical University Dresden Germany Institute of Computer Engineering Hardware Modeling and Simulation Technical University Kaiserslautern Germany Computer Science / Cyber-Physical Systems Virtual Prototyping and HW/SW Co-Design Technical University Munich Germany Department of Electrical and Computer Engineering SystemC Lab Ulm University Germany Institute of Microelectronics Electronic System Design using C and SystemC University of California, Irvine USA Center for Embedded and Cyber-physical Systems (CECS) Embedded Systems Modeling and Design University of Texas, Austin USA System-Level Architecture and Modeling Group Embedded System Design and Modeling University of Southampton UK Electronics and Computer Science Digital Systems Synthesis","title":"Education"},{"location":"resources/education/#systemc-education","text":"This page gives an overview of the available education and university programs teaching SystemC. Please let us know if a universiry or institute is missing or needs update. University Country Department Lectures Grenoble Alpes University France Grenoble INP Ensimag Transaction Level Modeling in SystemC Johannes Kepler University Linz Austria Institute for Complex Systems (ICS) Virtual Prototyping/SystemC RWTH Aachen University Germany Faculty of Electrical Engineering and Information Technology Computer Science 3 Sorbonne University France LIP6 / CIAN - Analog and Digital Integrated Circuit Texas A&M University USA Electrical & Computer Engineering Advanced Digital System Design Technical University Chemnitz Germany Faculty Electrical Engineering and Information Technology / Circuit and System Design Design of Digital Systems Technical University Delft Netherlands Microelectronics / Circuits and Systems Group VLSI Systems on Chip Technical University Dresden Germany Institute of Computer Engineering Hardware Modeling and Simulation Technical University Kaiserslautern Germany Computer Science / Cyber-Physical Systems Virtual Prototyping and HW/SW Co-Design Technical University Munich Germany Department of Electrical and Computer Engineering SystemC Lab Ulm University Germany Institute of Microelectronics Electronic System Design using C and SystemC University of California, Irvine USA Center for Embedded and Cyber-physical Systems (CECS) Embedded Systems Modeling and Design University of Texas, Austin USA System-Level Architecture and Modeling Group Embedded System Design and Modeling University of Southampton UK Electronics and Computer Science Digital Systems Synthesis","title":"SystemC Education"},{"location":"resources/projects/","text":"SystemC Libraries & Projects This page gives an overview of open-source SystemC libraries and projects. Please let us know if a project or library is missing or needs update. Models This is a list of SystemC models for use in virtual platforms: Name Description License NVIDIA Deep Learning Accelerator (NVDLA) SystemC TLM2.0-compatible virtual platform NVIDIA Open NVDLA License and Agreement v1.0 ParaNut Processor Customizable, highly scalable, and RISC-V compatible processor architecture for FPGA-based systems BSD-2-Clause Virtual Components Modeling Library (VCML) Models The VCML productivity library contains many component models (ARM, RISC-V, Virtio, ...) Apache-2.0 Virtual Components Modeling Library (VCML) NVDLA Model VCML integration of the NVDLA model Apache-2.0 VPV-Peripherals Library of example SystemC/TLM peripherals for various SoCs based on the SCC library Apache-2.0 Productivity Libraries Productivity libraries contain common resources and building blocks that can be used for High-Level Synthesis or the creation of SystemC-based virtual platforms. Name Description License High-Level Synthesis Libs (HLSLibs) Repository for the unlimited length integer and fixed-point AC types usable with SystemC, plus math, DSP and ML building blocks, as well as SystemC MatchLib Apache-2.0 SystemC-Components (SCC) A light weight productivity library for SystemC and TLM 2.0 based modeling tasks using C++11 provides common functions, components and modules often needed in SystemC based models Apache-2.0 Virtual Components Modeling Library (VCML) Sockets, Tracing, Registers, GDB server, Logging, Session Protocol, Component Models, Network backends, TLM2.0 protocols Apache-2.0 Virtual Platforms This is a list of open-source Virtual Platforms (VPs): Name Description Workloads License ARMv8 Virtual Platform (AVP64) OCX QEMU-based ARMv8 multi-core VP CoreMark, Dhrystone, Linux, Xen hypervisor MIT GreenSocs A53 VP ARM Cortex A53 multi-core VP (registration required) Linux GPLv2 GreenSocs N1 VP ARM Neoverse N1 multi-core VP (registration required) Linux GPLv2 GreenSocs RISC-V64 VP 64-bit RISC-V multi-core VP (registration required) Linux GPLv2 HIFIVE1-VP DBT-RISE-based RISC-V VP FreeRTOS BSD-3-Clause OpenRISC 1000 Multicore VP (OR1KMVP) OR1KISS-based multi-core OpenRISC1000 VP Linux Apache-2.0 TGC-VP The Scale4Edge ecosystem RISC-V VP FreeRTOS Apache-2.0 Xilinx Zynq-7000 QEMU based Xilinx Zynq-7000 SoC connected SystemC TLM 2.0 MIT Compilers and source-to-source transformations Name Description License Recoding Infrastructure for SystemC (RISC) Framework for analysis and agressive parallel simulation of embedded system models described in SystemC BSD-3-Clause SystemC compiler Compiler which translates synthesizable SystemC design to synthesizable SystemVerilog design Apache-2.0 Verilator Compiler and simulator which translates Verilog/SystemVerilog to SystemC LGPL-3.0 Simulators Name Description License SystemC SystemC 2.3.3 Reference Implementation Apache-2.0 SystemC-AMS SystemC-AMS 2.3 Proof-of-concept implementation Apache-2.0 Python Integration Name Description License PySysC A Python package to make SystemC usable from Python. It supports composition of a SystemC/TLM model as well as running the simulation. Apache-2.0 Verification Name Description License UVM-Connect UVM-based library that provides TLM1 and TLM2 connectivity and object passing between SystemC and SystemVerilog UVM models and components Apache-2.0 UVM-ML Universal Verification Methodology Multi-Language (UVM-ML) Open Architecture supporting UVM-SV, UVM-e, and UVM-SC Apache-2.0 UVM-SystemC Accellera implementation and standard of the Universal Verification Methodology (UVM) in SystemC Apache-2.0","title":"Libraries & Projects"},{"location":"resources/projects/#systemc-libraries-projects","text":"This page gives an overview of open-source SystemC libraries and projects. Please let us know if a project or library is missing or needs update.","title":"SystemC Libraries &amp; Projects"},{"location":"resources/projects/#models","text":"This is a list of SystemC models for use in virtual platforms: Name Description License NVIDIA Deep Learning Accelerator (NVDLA) SystemC TLM2.0-compatible virtual platform NVIDIA Open NVDLA License and Agreement v1.0 ParaNut Processor Customizable, highly scalable, and RISC-V compatible processor architecture for FPGA-based systems BSD-2-Clause Virtual Components Modeling Library (VCML) Models The VCML productivity library contains many component models (ARM, RISC-V, Virtio, ...) Apache-2.0 Virtual Components Modeling Library (VCML) NVDLA Model VCML integration of the NVDLA model Apache-2.0 VPV-Peripherals Library of example SystemC/TLM peripherals for various SoCs based on the SCC library Apache-2.0","title":"Models"},{"location":"resources/projects/#productivity-libraries","text":"Productivity libraries contain common resources and building blocks that can be used for High-Level Synthesis or the creation of SystemC-based virtual platforms. Name Description License High-Level Synthesis Libs (HLSLibs) Repository for the unlimited length integer and fixed-point AC types usable with SystemC, plus math, DSP and ML building blocks, as well as SystemC MatchLib Apache-2.0 SystemC-Components (SCC) A light weight productivity library for SystemC and TLM 2.0 based modeling tasks using C++11 provides common functions, components and modules often needed in SystemC based models Apache-2.0 Virtual Components Modeling Library (VCML) Sockets, Tracing, Registers, GDB server, Logging, Session Protocol, Component Models, Network backends, TLM2.0 protocols Apache-2.0","title":"Productivity Libraries"},{"location":"resources/projects/#virtual-platforms","text":"This is a list of open-source Virtual Platforms (VPs): Name Description Workloads License ARMv8 Virtual Platform (AVP64) OCX QEMU-based ARMv8 multi-core VP CoreMark, Dhrystone, Linux, Xen hypervisor MIT GreenSocs A53 VP ARM Cortex A53 multi-core VP (registration required) Linux GPLv2 GreenSocs N1 VP ARM Neoverse N1 multi-core VP (registration required) Linux GPLv2 GreenSocs RISC-V64 VP 64-bit RISC-V multi-core VP (registration required) Linux GPLv2 HIFIVE1-VP DBT-RISE-based RISC-V VP FreeRTOS BSD-3-Clause OpenRISC 1000 Multicore VP (OR1KMVP) OR1KISS-based multi-core OpenRISC1000 VP Linux Apache-2.0 TGC-VP The Scale4Edge ecosystem RISC-V VP FreeRTOS Apache-2.0 Xilinx Zynq-7000 QEMU based Xilinx Zynq-7000 SoC connected SystemC TLM 2.0 MIT","title":"Virtual Platforms"},{"location":"resources/projects/#compilers-and-source-to-source-transformations","text":"Name Description License Recoding Infrastructure for SystemC (RISC) Framework for analysis and agressive parallel simulation of embedded system models described in SystemC BSD-3-Clause SystemC compiler Compiler which translates synthesizable SystemC design to synthesizable SystemVerilog design Apache-2.0 Verilator Compiler and simulator which translates Verilog/SystemVerilog to SystemC LGPL-3.0","title":"Compilers and source-to-source transformations"},{"location":"resources/projects/#simulators","text":"Name Description License SystemC SystemC 2.3.3 Reference Implementation Apache-2.0 SystemC-AMS SystemC-AMS 2.3 Proof-of-concept implementation Apache-2.0","title":"Simulators"},{"location":"resources/projects/#python-integration","text":"Name Description License PySysC A Python package to make SystemC usable from Python. It supports composition of a SystemC/TLM model as well as running the simulation. Apache-2.0","title":"Python Integration"},{"location":"resources/projects/#verification","text":"Name Description License UVM-Connect UVM-based library that provides TLM1 and TLM2 connectivity and object passing between SystemC and SystemVerilog UVM models and components Apache-2.0 UVM-ML Universal Verification Methodology Multi-Language (UVM-ML) Open Architecture supporting UVM-SV, UVM-e, and UVM-SC Apache-2.0 UVM-SystemC Accellera implementation and standard of the Universal Verification Methodology (UVM) in SystemC Apache-2.0","title":"Verification"},{"location":"resources/standards/","text":"SystemC Standards & Implementations This page lists the most recent versions of the SystemC standards and implementations. Older versions can be found on the Accellera SystemC download page . Language Reference Manuals IEEE Std. 1666-2011 - IEEE Standard for Standard SystemC Language Reference Manual IEEE Std. 1666.1-2016 - IEEE Standard for Standard SystemC(R) Analog/Mixed-Signal Extensions Language Reference Manual SystemC Configuration, Control & Inspection (CCI) 1.0 Language Reference Manual SystemC Synthesis Subset 1.4.7 Language Reference Manual Reference Implementations and Proof-of-concept implementations SystemC 2.3.3 - Core SystemC Language (incl TLM and examples) SystemC AMS 2.3 Proof-of-Concept implementation SystemC CCI 1.0 Proof-of-Concept implementation SystemC Verification Library (SCV) 2.0.1 UVM-SystemC Library 1.0beta3 GitHub repositories accellera-official/systemc","title":"Standards & Implementations"},{"location":"resources/standards/#systemc-standards-implementations","text":"This page lists the most recent versions of the SystemC standards and implementations. Older versions can be found on the Accellera SystemC download page .","title":"SystemC Standards &amp; Implementations"},{"location":"resources/standards/#language-reference-manuals","text":"IEEE Std. 1666-2011 - IEEE Standard for Standard SystemC Language Reference Manual IEEE Std. 1666.1-2016 - IEEE Standard for Standard SystemC(R) Analog/Mixed-Signal Extensions Language Reference Manual SystemC Configuration, Control & Inspection (CCI) 1.0 Language Reference Manual SystemC Synthesis Subset 1.4.7 Language Reference Manual","title":"Language Reference Manuals"},{"location":"resources/standards/#reference-implementations-and-proof-of-concept-implementations","text":"SystemC 2.3.3 - Core SystemC Language (incl TLM and examples) SystemC AMS 2.3 Proof-of-Concept implementation SystemC CCI 1.0 Proof-of-Concept implementation SystemC Verification Library (SCV) 2.0.1 UVM-SystemC Library 1.0beta3","title":"Reference Implementations and Proof-of-concept implementations"},{"location":"resources/standards/#github-repositories","text":"accellera-official/systemc","title":"GitHub repositories"},{"location":"resources/tools/","text":"EDA Tools supporting SystemC This page gives an overview of electronics design automation tools and technologies supporting SystemC. Please let us know if an EDA tool or technology is missing or needs update. Industry Supported Tools Name Company Description 360 DV-SC Onespin Formal verification of algorithmic and HLS models Active HDL Aldec Windows based integrated FPGA Design Creation and Simulation solution Catapult HLS Siemens EDA High-level synthesis of C/C++ or SystemC descriptions to RTL CoFluent Intel System modeling and simulation solution to analyze performance properties CyberWorkBench NEC High-level synthesis of C/C++ or SystemC descriptions to RTL COSIDE COSEDA Integrated design environment for heterogeneous system modeling using SystemC and SystemC-AMS Helium Cadence Integrated design environment to enable early pre-silicon software bring-up and concurrent hardware/software co-verification Platform Architect Synopsys SystemC TLM 2.0 based graphical environment for early analysis and optimization of multicore SoC architectures for performance and power Questa Siemens EDA Multi-language simulation environment supporting Verilog, SystemVerilog, VHDL, and SystemC Simulink Coder Mathworks SystemC/TLM component generator using the Simulink Coder Stratus HLS Cadence High-level synthesis of C/C++ or SystemC descriptions to RTL Tina DesignSoft Circuit Simulator for Analog, Digital, MCU and RF Circuits VCS Synopsys Multi-language simulation environment supporting Verilog, SystemVerilog, VHDL, and SystemC Virtualizer Synopsys Integrated design environment for the development and deployment of virtual prototypes Vista Siemens EDA Integrated design environment for virtual prototyping, debugging, and analyzing of complex systems VLAB ASTC Simulation environment to enable virtualization of embedded products, driving rapid design iterations across hardware and software Xcelium Cadence Multi-language simulation environment supporting Verilog, SystemVerilog, VHDL, and SystemC All trademarks and trade names are the property of their respective owners","title":"Tools"},{"location":"resources/tools/#eda-tools-supporting-systemc","text":"This page gives an overview of electronics design automation tools and technologies supporting SystemC. Please let us know if an EDA tool or technology is missing or needs update.","title":"EDA Tools supporting SystemC"},{"location":"resources/tools/#industry-supported-tools","text":"Name Company Description 360 DV-SC Onespin Formal verification of algorithmic and HLS models Active HDL Aldec Windows based integrated FPGA Design Creation and Simulation solution Catapult HLS Siemens EDA High-level synthesis of C/C++ or SystemC descriptions to RTL CoFluent Intel System modeling and simulation solution to analyze performance properties CyberWorkBench NEC High-level synthesis of C/C++ or SystemC descriptions to RTL COSIDE COSEDA Integrated design environment for heterogeneous system modeling using SystemC and SystemC-AMS Helium Cadence Integrated design environment to enable early pre-silicon software bring-up and concurrent hardware/software co-verification Platform Architect Synopsys SystemC TLM 2.0 based graphical environment for early analysis and optimization of multicore SoC architectures for performance and power Questa Siemens EDA Multi-language simulation environment supporting Verilog, SystemVerilog, VHDL, and SystemC Simulink Coder Mathworks SystemC/TLM component generator using the Simulink Coder Stratus HLS Cadence High-level synthesis of C/C++ or SystemC descriptions to RTL Tina DesignSoft Circuit Simulator for Analog, Digital, MCU and RF Circuits VCS Synopsys Multi-language simulation environment supporting Verilog, SystemVerilog, VHDL, and SystemC Virtualizer Synopsys Integrated design environment for the development and deployment of virtual prototypes Vista Siemens EDA Integrated design environment for virtual prototyping, debugging, and analyzing of complex systems VLAB ASTC Simulation environment to enable virtualization of embedded products, driving rapid design iterations across hardware and software Xcelium Cadence Multi-language simulation environment supporting Verilog, SystemVerilog, VHDL, and SystemC All trademarks and trade names are the property of their respective owners","title":"Industry Supported Tools"},{"location":"resources/training/","text":"SystemC Training This page gives an overview of the available SystemC training. Please let us know if a training program is missing or needs update. Arteris IP IP-XACT & SystemC Virtual Prototyping Training Cadence SystemC Language Fundamentals SystemC Synthesis with Stratus HLS SystemC Transaction-Level Modeling (TLM 2.0) CircuitSutra SystemC Modeling for Virtual Prototype Development COSEDA Technologies GmbH SystemC and SystemC AMS dizain-sync SystemC Introduction for Modeling with TLM 2.0 Introduction to SystemC for Verification Advanced SystemC for Verification Doulos Comprehensive SystemC Comprehensive SystemC Online Essential C++ for SystemC Essential C++ for SystemC Online Fundamentals of SystemC Fundamentals of SystemC Online Modular SystemC SystemC Modeling using TLM-2.0 SystemC Modeling using TLM-2.0 Online Comprehensive C++ Fraunhofer SystemC Basics SystemC Seminar Hardent Academy / Willamette HDL SystemC Introduction for Modeling with TLM 2.0 Introduction to SystemC for Verification Siemens SystemC For Modeling with TLM 2.0","title":"Training"},{"location":"resources/training/#systemc-training","text":"This page gives an overview of the available SystemC training. Please let us know if a training program is missing or needs update.","title":"SystemC Training"},{"location":"resources/training/#arteris-ip","text":"IP-XACT & SystemC Virtual Prototyping Training","title":"Arteris IP"},{"location":"resources/training/#cadence","text":"SystemC Language Fundamentals SystemC Synthesis with Stratus HLS SystemC Transaction-Level Modeling (TLM 2.0)","title":"Cadence"},{"location":"resources/training/#circuitsutra","text":"SystemC Modeling for Virtual Prototype Development","title":"CircuitSutra"},{"location":"resources/training/#coseda-technologies-gmbh","text":"SystemC and SystemC AMS","title":"COSEDA Technologies GmbH"},{"location":"resources/training/#dizain-sync","text":"SystemC Introduction for Modeling with TLM 2.0 Introduction to SystemC for Verification Advanced SystemC for Verification","title":"dizain-sync"},{"location":"resources/training/#doulos","text":"Comprehensive SystemC Comprehensive SystemC Online Essential C++ for SystemC Essential C++ for SystemC Online Fundamentals of SystemC Fundamentals of SystemC Online Modular SystemC SystemC Modeling using TLM-2.0 SystemC Modeling using TLM-2.0 Online Comprehensive C++","title":"Doulos"},{"location":"resources/training/#fraunhofer","text":"SystemC Basics SystemC Seminar","title":"Fraunhofer"},{"location":"resources/training/#hardent-academy-willamette-hdl","text":"SystemC Introduction for Modeling with TLM 2.0 Introduction to SystemC for Verification","title":"Hardent Academy / Willamette HDL"},{"location":"resources/training/#siemens","text":"SystemC For Modeling with TLM 2.0","title":"Siemens"},{"location":"resources/videos/","text":"SystemC Videos SystemC Evolution Fika - 30 June 2021 UVM-SystemC Randomization - Updates From The SystemC Verification Working Group - DVCon US 2021 Tutorial Automotive Virtual Prototypes - DVCon Europe 2020 UVM-SystemC Randomization - Updates From The SystemC Verification Working Group - DVCon US 2019 Build a VP with SystemC and PySysC - DVCon Europe 2021","title":"Videos"},{"location":"resources/videos/#systemc-videos","text":"SystemC Evolution Fika - 30 June 2021 UVM-SystemC Randomization - Updates From The SystemC Verification Working Group - DVCon US 2021 Tutorial Automotive Virtual Prototypes - DVCon Europe 2020 UVM-SystemC Randomization - Updates From The SystemC Verification Working Group - DVCon US 2019 Build a VP with SystemC and PySysC - DVCon Europe 2021","title":"SystemC Videos"}]}